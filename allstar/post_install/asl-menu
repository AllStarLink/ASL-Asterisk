#!/bin/bash
# ASL-MENU
# V2.1
# 2018 May
# By N8THN
# Modifications by KK9ROB 2021/02/25
# Extensive Mods by WD6AWP April 2021
clear

# define variables
logfile=/tmp/asl-menu.log
title="ASL 2.0.0-Beta"
msgbox_height=12
msgbox_width=60
#logfile=/dev/null
## all other variables defined in get_node_info

check_if_root() {
    if [ $EUID -ne 0 ]; then
        #if [ `whoami` != root ]; then
        whiptail --msgbox "This script must be run as root or with sudo" $msgbox_height $msgbox_width
        exit 1
    else
        rm -f $logfile
        echo "check_if_root yes" >>$logfile
    fi
}

check_config_files() {
    echo "check_config_files" >>$logfile
    if [ ! -f $CONFIGS/rpt.conf ]; then
        whiptail --msgbox "ASL config files not in $CONFIGS directory. Exiting." $msgbox_height $msgbox_width
        exit 1
    fi
}

calc_wt_size() {
	echo "doing calc_wt_size" >>$logfile
    ##WT_WIDTH=$(tput cols)
	# Bash knows the terminal size
	# echo "The number of columns are $COLUMNS"
	# echo "The number of lines are $LINES"

    if [ $LINES -lt 22 ]; then
    	echo "Teaminal size must be at least 22 lines."
    	exit
    fi
    if [ $COLUMNS -lt 60 ]; then
    	echo "Teaminal size must be at least 60 columns."
    	exit
    fi

    WT_HEIGHT=22

    # Leave full width up to 100 columns
    WT_WIDTH=$COLUMNS
    if [ $COLUMNS -gt 100 ]; then
    	WT_WIDTH=100
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT - 8))
}

get_node_info() {
    echo "get_node_info" >>$logfile
    CONFIGS=/etc/asterisk
    WEBROOT=/var/www/html
    TMP=/tmp
    BACKUPDIR=/etc/asterisk/backups

    FAIL2BANFILE=/etc/fail2ban/jail.d/allstar.conf
    #FIREWALLFILE=/etc/iptables.conf
    FIREWALLFILE=/etc/iptables/rules.v4

    APTGET=$(which apt-get)
    PING=$(which ping)
    USERADD=$(which useradd)
    USERDEL=$(which userdel)
    DPKG_QUERY=$(which dpkg-query)
    SERVICE=$(which service)
    IPTABLES=$(which iptables)
    IPTABLES_RESTORE=$(which iptables-restore)
    IFCONFIG=$(which ifconfig)
    LSMOD=$(which lsmod)
    UPDATE_RCD=$(which update-rc.d)
    GLOBALIP=$(ip a | grep "scope global" | grep -Po '(?<=inet )[\d.]+')

    ASTERISK=/usr/sbin/asterisk
    ASTRES=/usr/sbin/astres.sh
    ASTUP=/usr/sbin/astup.sh
    ASTDN=/usr/sbin/astdn.sh
    SAVENODE=/usr/sbin/save-node
    RESTORENODE=/usr/sbin/restore-node
    FIRSTTIME=/usr/sbin/first-time

    REBOOT_NEEDED=0
    AST_RESTART=0

    HTTPPORT=80
    HTTPSPORT=443
    ECHOPORT1=5198
    ECHOPORT2=5199
    ECHOPORT3=5200
    NODENUM=$(grep -o '^\[[0-9]*\]' $CONFIGS/rpt.conf | sed 's/.*\[\([^]]*\)\].*/\1/g')
    CALLSIGN=$(grep '^idrecording =' $CONFIGS/rpt.conf | awk -F'=' '{print $2}' | sed 's/|\i//' | sed -e 's/^\(.\{9\}\).*/\1/')
    REGPASSWD=$(grep 'register =' $CONFIGS/iax.conf | awk -F'=' '{print $2}' | awk -F'   ;' '{print $1}')
    INTERFACE=$(grep '^rxchannel' $CONFIGS/rpt.conf | awk -F'=' '{print $2}' | awk -F'  ;' '{print$1}')
    ECHOLINKCALLSIGN=$(awk '/call =/' $CONFIGS/echolink.conf | awk '{print $3}')
    ECHOLINKASTNODE=$(awk '/astnode =/' $CONFIGS/echolink.conf | awk '{print $3}')
    ECHOLINKNODE=$(awk '/^node =/' $CONFIGS/echolink.conf | awk '{print $3}')
    #SSHPORT=$(grep '^Port ' /etc/ssh/sshd_config | awk -F" " '{print $2}')
    SSHPORT=$(grep 'Port ' /etc/ssh/sshd_config | awk -F" " '{print $2}')
    RTCMPORT=$(grep '^port[ \t]*=' /etc/asterisk/voter.conf | awk -F"=" '{print $2}' | grep -oe '\([0-9.]*\)')
    IAXPORT=$(grep '^bindport[ \t]*=' $CONFIGS/iax.conf | awk -F"=" '{print $2}' | grep -oe '\([0-9.]*\)')
    MGRPORT=$(grep '^port[ \t]*=' $CONFIGS/manager.conf | awk -F"=" '{print $2}' | grep -oe '\([0-9.]*\)')
    USBRADIOMODULE=$(grep '^load[ \t]*=>[ \t]*chan_usbradio.so' $CONFIGS/modules.conf)

    sendtoadminfile=/tmp/$NODENUM.$FILEDATENAME.tgz

    REALID=$(who am i | awk '{print $1}')
    if [ $REALID == "root" ]; then
        HOMEDIR=$REALID
    else
        HOMEDIR="/home/$REALID"
    fi
}

get_time_stamps() {
    MONTHDAY=$(date +%Y-%m-%d)
    DATEEXT=$(date +%Y-%m-%d.%H:%M)
    FILEDATENAME=$(date +ASL_%Y-%m-%d_%H%M)
}

################
## Info pages ##
################

info_main_menu() {
    echo "info_main_menu" >>$logfile
    MSG="Welcome to the AllStarLink Main Menu.\n\n"
    MSG="${MSG}Use the information menu option on each sub menu for an explanation of each option. Please vist the AllStarLink Web Site https://www.allstarlink.org for more information."
    whiptail --msgbox "${MSG}" $msgbox_height $msgbox_width
}

info_config_menu() {
    echo "info_config_menu" >>$logfile
    MSG="Editing configuration files requires detailed knowledge of Asterisk and app_rpt settings. "
    MSG="${MSG}Please make a copy of your settings before editing any files."
    whiptail --msgbox "${MSG}" $msgbox_height $msgbox_width
}

info_backup_restore_menu() {
    echo "info_backup_restore_menu" >>$logfile
    whiptail --msgbox "Auto savenode - uses the save-node script to archive your configuration in .tgz format and uploads to ASL backup server. \
\nRestore node - retrieves the list from the ASL backup server and allows you to choose which one to use \
The Local backup copies you configuration files to a separate directory under the name of YEAR-MONTH-DAY for reference \
The Local backup also creates an archive file in .tgz format which you may download using the backup-server webpage interface \
for off-site storage of your configuration\n \
The Restore backup allows you to restore from either a YEAR-MONTH-DAY folder or an archive .tgz file you uploaded using the backup-server webpage interface \
" $msgbox_height $msgbox_width
}

info_OS_menu() {
    echo "info_OS_menu" >>$logfile
    whiptail --msgbox "Apt-get update is used to updates the repositories with the latest packages \
Apt-get upgrade will upgrade all of the packages on your system \
firewall and fail2ban are two of the basic security features you should use if you have a public IP address \
The ASL addons menu list available packages to enhance your ASL node \
Change CPU performance is for Raspberry Pi systems only \
" $msgbox_height $msgbox_width
}

info_security_menu() {
    echo "info_security_menu" >>$logfile
    whiptail --msgbox "Tools to help secure you system and ASL node \
Please be mindfull so you do not disable your system \
" $msgbox_height $msgbox_width
}

info_diagnostics_menu() {
    echo "info_diagnostics_menu" >>$logfile
    whiptail --msgbox "Tools to help diagnose a possibly problem with you configuration \
Also allows you to create a file with the listed menu options to download and send to the ASL admin team \
or someone else who may be able to help \
" $msgbox_height $msgbox_width
}

info_asl_addons_menu() {
    echo "info_asl_addons_menu" >>$logfile
    whiptail --msgbox "Please encourage developers to create an apt-get package that we may add to this menu" $msgbox_height $msgbox_width
}

info_exit_menu() {
    echo "info_exit_menu" >>$logfile
    whiptail --msgbox "Under Construction" $msgbox_height $msgbox_width
}

###### Configuration checks

do_check_is_usbradio() {
    echo "do_check_is_usbradio" >>$logfile
    # is module loaded
    grep '^load[ \t]*=>[ \t]*chan_usbradio.so' $CONFIGS/modules.conf >/dev/null
    if [ $? -eq 0 ]; then
        USBRADIOMODULE=YES
        echo "USBRADIOMODULE=YES" >>$logfile
    else
        USBRADIOMODULE=NO
        echo "USBRADIOMODULE=NO" >>$logfile
    fi
    # is rxchannel
    grep -i '^rxchannel[ \t]*=[ \t]*Radio' $CONFIGS/rpt.conf >/dev/null
    if [ $? -eq 0 ]; then
        RXCHUSBRADIO=YES
    else
        RXCHUSBRADIO=NO
    fi
    if [ $USBRADIOMODULE = "YES" ] && [ $RXCHUSBRADIO = "YES" ]; then
        USBRADIO_YN=YES
        echo "USBRADIO_YN=YES" >>$logfile
    else
        USBRADIO_YN=NO
        echo "USBRADIO_YN=NO" >>$logfile
    fi
}

do_check_is_simpleusb() {
    echo "do_check_is_simpleusb" >>$logfile

    grep '^load[ \t]*=>[ \t]*chan_simpleusb.so' $CONFIGS/modules.conf >/dev/null
    if [ $? -eq 0 ]; then
        SIMPLEUSBMODULE=YES
    else
        SIMPLEUSBMODULE=NO
    fi

    grep -i '^rxchannel[ \t]*=[ \t]*Simple' $CONFIGS/rpt.conf >/dev/null
    if [ $? -eq 0 ]; then
        RXCHSIMPLEUSB=YES
    else
        RXCHSIMPLEUSB=NO
    fi

    if [ $SIMPLEUSBMODULE = "YES" ] && [ $RXCHSIMPLEUSB = "YES" ]; then
        SIMPLEUSB_YN=YES
        echo "SIMPLEUSB_YN=YES" >>$logfile
    else
        SIMPLEUSB_YN=NO
        echo "SIMPLEUSB_YN=NO" >>$logfile
    fi
}

do_check_is_rpi() {
    echo "do_check_is_rpi" >>$logfile
    uname -n | grep raspberry >/dev/null
    if [ $? -eq 0 ]; then
        RPI_YN=YES
        echo "RPI_YN=YES" >>$logfile
    else
        RPI_YN=NO
        echo "RPI_YN=NO" >>$logfiile
    fi
}

do_is_f2b_installed() {
    echo "do_is_f2b_installed" >>$logfile
    $DPKG_QUERY -l | grep fail2ban >/dev/null
    if [ $? -eq 0 ]; then
        F2B_YN=YES
        echo "F2B_YN=YES" >>$logfile
    else
        F2B_YN=NO
        echo "F2B_YN=NO" >>$logfile
    fi
}

do_is_fw_installed() {
    echo "do_is_fw_installed" >>$logfile
    $DPKG_QUERY -l | grep iptables >/dev/null
    if [ $? = 0 ]; then
        IPTAB_YN=YES
        echo "IPTAB_YN=YES" >>$logfile
    else
        IPTAB_YN=NO
        echo "IPTAB_YN=NO" >>$logfile
    fi
}

do_is_webserver_installed() {
    echo "do_is_webserver_installed" >>$logfile
    $DPKG_QUERY -l | grep apache2 >/dev/null
    if [ $? -eq 0 ]; then
        WEBSERVE_YN=YES
        echo "WEBSERVE_YN=YES" >>$logfile
    else
        WEBSERVE_YN=NO
        echo "WEBSERVE_YN=NO" >>$logfile
    fi
}

do_is_allmon_installed() {
    echo "do_is_allmon_installed" >>$logfile
    #if [ -f $WEBROOT/allmon2/index.php ] && [ -f $WEBROOT/allmon2/controlpanel.php ]; then
    $DPKG_QUERY -l | grep allmon2 >/dev/null
    if [ $? -eq 0 ]; then
        ALLMON_YN=YES
        echo "ALLMON_YN=YES" >>$logfile
    else
        ALLMON_YN=NO
        echo "ALLMON_YN=NO" >>$logfile
    fi
}

do_is_govutils_installed() {
    echo "do_is_govutils_installed" >>$logfile
    $DPKG_QUERY -l | grep cpufrequtils >/dev/null
    if [ $? -eq 0 ]; then
        CPUFREQUTILS="YES"
    else
        CPUFREQUTILS="NO"
    fi
    $DPKG_QUERY -l | grep sysfsutils >/dev/null
    if [ $? -eq 0 ]; then
        SYSFSUTILS="YES"
    else
        SYSFSUTILS="NO"
    fi
    if [ $CPUFREQUTILS = "YES" ] && [ $SYSFSUTILS = "YES" ]; then
        GOVUTILS="YES"
        echo "GOVUTILS=YES" >>$logfile
    else
        GOVUTILS="NO"
        echo "GOVUTILS=NO" >>$logfile
    fi
}

do_nothing() {
    echo "do_nothing" >>$logfile
    # place to land the menu options that aren't done yet
    whiptail --msgbox "Option not configured yet" $msgbox_height $msgbox_width
}

do_finish() {
    echo "do_finish" >>$logfile
    # check if reboot needed.
    if [ $REBOOT_NEEDED -eq 1 ]; then
        whiptail --title "$title" --yesno "Reboot required for changes to take effect.\n\nReboot now?" $msgbox_height $msgbox_width
        if [ $? -eq 0 ]; then # yes
            sync
            reboot -t 30
        else
            whiptail --msgbox "You may reboot the machine at your convenience." $msgbox_height $msgbox_width
        fi
    fi
    if [ $AST_RESTART -eq 1 ]; then
        whiptail --title "$title" --yesno "Asterisk reload is required for changes to take effect.\n\nRestart Asterisk now?" $msgbox_height $msgbox_width
        if [ $? -eq 0 ]; then #yes
            $ASTRES
            whiptail --msgbox "Asterisk has been restarted." $msgbox_height $msgbox_width
        else
            whiptail --msgbox "Please restart Asterisk at your convenience." $msgbox_height $msgbox_width
        fi
    fi
    whiptail --title "$title" --yesno "Exit ASL Main Menu now?\n\nIf yes type asl-menu to relaunch the menu." $msgbox_height $msgbox_width
    if [ $? -ne 0 ]; then
        return
    else
        exit
    fi
}

###################################
## main menu simple subfunctions ##
###################################

do_run_firsttime() {
    echo "do_run_firsttime" >>$logfile
    touch /etc/asterisk/firsttime
    /usr/sbin/first-time
    rm -f /etc/asterisk/firsttime
}

do_node_setup() {
    echo "do_node_setup" >>$logfile
    /usr/sbin/node-setup
}

do_radio_tune_menu() {
    echo "do_radio_tune_menu" >>$logfile
    do_check_is_usbradio
    if [ $USBRADIO_YN = "YES" ]; then
        clear
        /usr/sbin/radio-tune-menu
    else
        whiptail --title "$title" --msgbox "USBradio must be enabled in modules.conf and selected in rpt.conf" $msgbox_height $msgbox_width
    fi
}

do_simpleusb_tune_menu() {
    echo "do_simpleusb_tune_menu" >>$logfile
    do_check_is_simpleusb
    if [ $SIMPLEUSB_YN = "YES" ]; then
        clear
        /usr/sbin/simpleusb-tune-menu
    else
        whiptail --title "$title" --msgbox "SimpleUSB must be enabled in modules.conf and selected in rpt.conf" $msgbox_height $msgbox_width
    fi
}

do_asl_cli() {
    echo "do_asl_cli" >>$logfile
    whiptail --title "$title" --msgbox "Entering the Asterisk CLI. Type exit when done." $msgbox_height $msgbox_width
    clear
    $ASTERISK -rvvv
}

do_bash_shell() {
    echo "do_bash_shell" >>$logfile
    whiptail --title "$title" --msgbox "Entering a bash shell. Type exit when done." $msgbox_height $msgbox_width
    clear
    su - `logname`
}

do_reboot() {
    whiptail --title "$title" --yesno "Are you sure you'd like to reboot the server now?" --defaultno 12 60
    if [ $? -eq 0 ]; then
        sync
        sleep 1
        /usr/sbin/shutdown -r now
    fi
}

do_shutdown() {
    whiptail --title "$title" --yesno "Are you sure you'd like to shutdown the server now?" --defaultno 12 60
    if [ $? -eq 0 ]; then
        whiptail --title "$title" --yesno "WARNING! Physical access to server need to power on. Are you still sure you'd like to shutdown the server?" --defaultno 12 60
        if [ $? -eq 0 ]; then
            sync
            sleep 1
            /usr/sbin/shutdown -h now
        fi
    fi
}

do_logout() {
    whiptail --title "$title" --yesno "To logout select Yes then type logout." --defaultno 12 60
    if [ $? -eq 0 ]; then
        exit
    fi
}

###################################
## Diagnostics menu sub sections ##
###################################

do_ping_google_dns() {
    echo "do_ping_google_dns" >>$logfile
    clear
    echo "Please wait..."
    DNSPINGRESULTS=$($PING 8.8.8.8 -c4)
    whiptail --msgbox "DNS ping results:\n\n$DNSPINGRESULTS" 24 70
}

do_ping_reg_asl() {
    echo "do_ping_reg_asl" >>$logfile
    clear
    echo "Please wait..."
    REGASLPINGRESULTS=$($PING register.allstarlink.org -c4)
    whiptail --msgbox "register.allstarlink.org ping results:\n\n$REGASLPINGRESULTS" 24 70
}

do_iax_show_reg() {
    echo "do_iax_show_reg" >>$logfile
    clear
    echo "Please wait..."
    IAXSHOWREG=$($ASTERISK -rx "iax2 show registry")
    whiptail --msgbox "IAX2 show registry:\n\n$IAXSHOWREG" $msgbox_height 70
}

do_asl_version_show() {
    echo "do_asl_version_show" >>$logfile
    clear
    echo "Please wait..."
    ASLVERS=$($ASTERISK -rx "core show version")
    whiptail --msgbox "ASL Version:\n$ASLVERS" $msgbox_height 70
}

do_validate_updatenodelist_running() {
    echo "do_validate_updatenodelist_running" >>$logfile
    systemctl is-active --quiet update-node-list.service
    if [ $? -eq 0 ]; then #yes
        whiptail --msgbox "update-node-list program IS running" $msgbox_height $msgbox_width
    else
        whiptail --msgbox "update-node-list program is NOT running" $msgbox_height $msgbox_width
    fi
}

do_updatenodelist_restart() {
    echo "do_updatenodelist_restart" >>$logfile
    systemctl restart --quiet update-node-list.service
    if [ $? -eq 0 ]; then #yes
        whiptail --msgbox "update-node-list did restart" $msgbox_height $msgbox_width
    else
        whiptail --msgbox "update-node-list did NOT restart" $msgbox_height $msgbox_width
    fi
}

do_astres() {
    echo "do_astres" >>$logfile
    result=$($ASTRES)
    AST_RESTART=0
    whiptail --msgbox "$result" $msgbox_height $msgbox_width
}

do_astup() {
    echo "do_astup" >>$logfile
    result=$($ASTUP)
    whiptail --msgbox "$result" $msgbox_height $msgbox_width
}

do_astdn() {
    echo "do_astdn" >>$logfile
    result=$($ASTDN)
    AST_RESTART=0
    whiptail --msgbox "$result" $msgbox_height $msgbox_width
}

do_upload_diag() {
    echo "do_upload_diag" >>$logfile
    whiptail --msgbox "This will gather node number, password, basic system configuration and \nany error messages from the log files." $msgbox_height $msgbox_width
    RETEMAIL=$(whiptail --inputbox "Please enter a contact email for us to get back with you" $msgbox_height $msgbox_width --title "Contact email address" 3>&1 1>&2 2>&3)
    whiptail --msgbox "Please have a little patience while we gather a few system details" $msgbox_height $msgbox_width
    echo "return email: $RETEMAIL" >$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "NODE=$NODENUM" >>$sendtoadminfile
    echo "REGPASS=$REGPASSWD" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Call sign: $CALLSIGN" >>$sendtoadminfile
    echo "Interface type: $INTERFACE" >>$sendtoadminfile
    echo "Echolink Callsign: $ECHOLINKCALLSIGN" >>$sendtoadminfile
    echo "Echolink node: $ECHOLINKNODE  ASL node used: $ECHOASTNODE" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Ping test to 8.8.8.8" >>$sendtoadminfile
    $PING 8.8.8.8 -c4 >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Ping test to register.allstarlink.org" >>$sendtoadminfile
    $PING register.allstarlink.org -c4 >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Ouput of ifconfig" >>$sendtoadminfile
    $IFCONFIG >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Output of lsmod grep dahdi" >>$sendtoadminfile
    $LSMOD | grep dahdi >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "IAX2 registry" >>$sendtoadminfile
    $ASTERISK -rx "iax2 show registry" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Asterisk version:" >>$sendtoadminfile
    $ASTERISK -rx "core show version" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "Current date and time: $DATEEXT" >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "update-node-list service running?" >>$sendtoadminfile
    systemctl status update-node-list >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "/tmp/rpt_extnodes-temp file" >>$sendtoadminfile
    ls -l /tmp/rpt_extnodes-temp >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "/var/lib/asterisk/rpt_extnodes file" >>$sendtoadminfile
    ls -l /var/lib/asterisk/rpt_extnodes >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "####### Begin warnings from messages file" >>$sendtoadminfile
    cat /var/log/asterisk/messages | grep WARNING >>$sendtoadminfile
    echo "" >>$sendtoadminfile
    echo "####### Begin warnings from messages.1 file" >>$sendtoadminfile
    cat /var/log/asterisk/messages.1 | grep WARNING >>$sendtoadminfile
    whiptail --msgbox "Use the backup-server option to retrieve the $sendtoadminfile file. Simply rename with .txt extension after download." $msgbox_height $msgbox_width

    return

    ##########This part skipped as its not used yet###############################################################################################################
    SENDDIAGS_SITE=http://backup.allstarlink.org
    if [ -r /etc/asterisk/savenode.conf ]; then
        . /etc/asterisk/savenode.conf
    else
        whiptail --msgbox "Savenode.conf file does not exist please edit and set it to enabled" $msgbox_height $msgbox_width
        return
    fi

    if [ .$ENABLE = "." ]; then
        whiptail --msgbox "Savenode.conf file not set to enable" $msgbox_height $msgbox_width
        return
    fi

    if [ $ENABLE -eq 0 ]; then
        whiptail --msgbox "Savenode.conf file not set to enable" $msgbox_height $msgbox_width
        return
    fi

    whiptail --msgbox "Uploading diagnostic file to ASL Admin team" $msgbox_height $msgbox_width

    wget -q --timeout=60 --tries=1 --post-file=$sendtoadminfile \
        --http-user=$NODE --http-password=$PASSWORD -O- \
        $SENDDIAGS_SITE/uploaddiags.cgi
    if [ $? -ne 0 ]; then
        whiptail --msgbox "There was an error uploading the file to ASL admin team"
    fi

}

####################
## OS subsections ##
####################

do_sethost() {
    echo "do_sethost" >>$logfile
    /usr/sbin/set-host
}

do_netsetup() {
    echo "do_netsetup" >>$logfile
    /usr/sbin/net-setup
}

do_edit_allmon_config() {
    echo "do_edit_allmon_config" >>$logfile
    if [ ! -f $WEBROOT/allmon2/allmon.ini.php ]; then
        whiptail --msgbox "Allmon2 config file not found, is Allmon2 installed?" $msgbox_height $msgbox_width
    else
        nano $WEBROOT/allmon2/allmon.ini.php
    fi
}

do_apt_get_update() {
    echo "do_apt_get_update" >>$logfile
    whiptail --msgbox "Grab a cup of coffee if you have not run this in a while\nUpdating repository information" $msgbox_height $msgbox_width
    $APTGET update
    whiptail --msgbox "Done running apt-get update" $msgbox_height $msgbox_width
}

do_apt_get_upgrade() {
    echo "do_apt_get_upgrade" >>$logfile
    whiptail --msgbox "Might be a good time for lunch this could take a while" $msgbox_height $msgbox_width
    $APTGET -y upgrade
    whiptail --msgbox "Done running apt-get upgrade" $msgbox_height $msgbox_width
}

do_install_firewall() {
    echo "do_install_firewall" >>$logfile
    if (whiptail --title "$title" --yesno "Would you like to install the iptables firewall?" $msgbox_height $msgbox_width); then
        do_is_fw_installed
        if [ $IPTAB_YN = "YES" ]; then
            whiptail --msgbox "We will update the iptables firewall to latest version\nuse the System Security Menu page for configuration options" $msgbox_height $msgbox_width
            $APTGET update
            $APTGET -y install --only-upgrade iptables
        else
            whiptail --msgbox "We will install iptables firewall\nuse the System Security Menu page for configuration options" $msgbox_height $msgbox_width
        fi
        $APTGET update
        $APTGET -y install iptables
        do_set_precon_firewall
        echo "#!/bin/sh" >/etc/network/if-up.d/firewall
        echo "iptables-restore < /etc/iptables.conf" >>/etc/network/if-up.d/firewall
        chmod +x /etc/network/if-up.d/firewall
        whiptail --msgbox "The preconfigured firewall rules have been loaded\nYou may edit the firewall rules from the System Securities Menu" $msgbox_height $msgbox_width
    fi
}

do_install_fail2ban() {
    echo "do_install_fail2ban" >>$logfile
    if (whiptail --title "$title" --yesno "A FIREWALL MUST BE INSTALLED FIRST\n\nWould you like to install the fail2ban firewall addon?" $msgbox_height $msgbox_width); then
        whiptail --msgbox "We will install the fail2ban package\nuse the System Security Menu page for configuration options" $msgbox_height $msgbox_width
        $APTGET update
        $APTGET -y install fail2ban
        do_set_precon_firewall
        do_set_precon_fail2ban

        whiptail --msgbox "The pre-configured firewall and fail2ban rules have been loaded\nYou may edit the fail2ban rules from the System Securities Menu" $msgbox_height $msgbox_width
    fi
}

do_install_allmon() {
    echo "do_install_allmon" >>$logfile
    do_is_allmon_installed
    if [ $ALLMON_YN = "YES" ]; then
        whiptail --msgbox "We will update the Allmon package to the latest version" $msgbox_height $msgbox_width
        $APTGET -y install --only-upgrade allmon2
    else
        whiptail --msgbox "We will install the Allmon package with the latest version" $msgbox_height $msgbox_width
        $APTGET -y install allmon2
        #                cd $WEBROOT && git clone https://github.com/tsawyer/allmon2.git
        if (whiptail --title "Copy allmon config" --yesno "Would you like to copy the allmon.ini.php file, created in the node-setup script?" $msgbox_height $msgbox_width); then
            mv -f $WEBROOT/allmon2/allmon.ini.php $WEBROOT/allmon2/allmon.ini.php.$DATEEXT 2>/dev/null #backup default
            cp -f $CONFIGS/allmon.ini.php $WEBROOT/allmon2/allmon.ini.php 2>/dev/null                  #copy what node-setup script created
        fi
    fi
    whiptail --msgbox "You may edit the allmon.ini.php file from the ASL edit config files menu" $msgbox_height $msgbox_width
}

do_install_webserver() {
    echo "do_install_webserver" >>$logfile
    do_is_webserver_installed
    if (whiptail --title "Install webserver and dependencies?" --yesno "Would you like to install/update webserver?" $msgbox_height $msgbox_width); then
        if [ $WEEBSERVE_YN = "YES" ]; then
            whiptail --msgbox "We will update Apache2 webserver and PHP support packages" $msgbox_height $msgbox_width
            $APTGET -y install --only-upgrade apache2
            $APTGET -y install --only-upgrade php
        else
            whiptail --msgbox "We will install Apache2 webserver and PHP support" $msgbox_height $msgbox_width
            $APTGET update
            $APTGET -y install apache2
            $APTGET -y install php
        fi
    fi
}

do_install_cpu_clocking() {
    echo "do_install_cpu_clocking" >>$logfile
    whiptail --msgbox "Adjust CPU overclocking settings" $msgbox_height $msgbox_width
    #check if packages loaded
    do_check_is_rpi
    if [ $RPI_YN = "NO" ]; then
        whiptail --msgbox "This option currently available only for Raspberry Pi" $msgbox_height $msgbox_width
    else
        do_is_govutils_installed
        if [ $GOVUTILS = "YES" ]; then
            whiptail --msgbox "We will update the governor packages" $msgbox_height $msgbox_width
            $APTGET update
            $APTGET -y install --only-upgrade cpufrequtils
            $APTGET -y install --only-upgrade sysfsutils
            $UPDATE_RCD raspi-config disable
        else
            whiptail --msgbox "We will install the governor utilities packages" $msgbox_height $msgbox_width
            $APTGET update
            $APTGET -y install cpufrequtils
            $APTGET -y install sysfsutils
            $UPDATE_RCD raspi-config disable
        fi
    fi
}

do_set_cpu_ondemand() {
    echo "do_set_cpu_ondemand" >>$logfile
    do_is_govutils_installed
    if [ $GOVUTILS = "NO" ]; then
        whiptail --msgbox "The governor utilities packages must be installed before using this option" $msgbox_height $msgbox_width
    else
        echo "GOVERNOR=\"ondemand\"" >/etc/default/cpufrequtils
        /etc/init.d/cpufrequtils restart
        whiptail --msgbox "The governor is now set to ondemand" $msgbox_height $msgbox_width
    fi
}

do_set_cpu_conservative() {
    echo "do_set_cpu_conservative" >>$logfile
    do_is_govutils_installed
    if [ $GOVUTILS = "NO" ]; then
        whiptail --msgbox "The governor utilities packages must be installed before using this option" $msgbox_height $msgbox_width
    else
        echo "GOVERNOR=\"conservative\"" >/etc/default/cpufrequtils
        /etc/init.d/cpufrequtils restart
        whiptail --msgbox "The governor is now set to conservative" $msgbox_height $msgbox_width
    fi
}

do_set_cpu_performance() {
    echo "do_set_cpu_performance" >>$logfile
    do_is_govutils_installed
    if [ $GOVUTILS = "NO" ]; then
        whiptail --msgbox "The governor utilities packages must be installed before using this option" $msgbox_height $msgbox_width
    else
        echo "GOVERNOR=\"performance\"" >/etc/default/cpufrequtils
        /etc/init.d/cpufrequtils restart
        whiptail --msgbox "The governor is now set to performance" $msgbox_height $msgbox_width
    fi
}

do_set_cpu_powersave() {
    echo "do_set_cpu_powersave" >>$logfile
    do_is_govutils_installed
    if [ $GOVUTILS = "NO" ]; then
        whiptail --msgbox "The governor utilities packages must be installed before using this option" $msgbox_height $msgbox_width
    else
        echo "GOVERNOR=\"powersave\"" >/etc/default/cpufrequtils
        /etc/init.d/cpufrequtils restart
        whiptail --msgbox "The governor is now set to powersave" $msgbox_height $msgbox_width
    fi
}

do_savenode() {
    echo "do_savenode" >>$logfile
    $SAVENODE
}

do_restorenode() {
    echo "do_restorenode" >>$logfile
    $RESTORENODE
}

do_local_conf_backup() {
    echo "do_local_conf_backup" >>$logfile
    get_time_stamps
    whiptail --title "$title" --yesno "Local backup to file $FILEDATENAME?" $msgbox_height $msgbox_width
    if [ $? -eq 0 ]; then
        #mkdir $CONFIGS/$FILEDATENAME > /dev/null
        #cp -r $CONFIGS/*.conf $CONFIGS/$FILEDATENAME
        #cd / && tar czf /tmp/$FILEDATENAME.tgz  etc/asterisk > /dev/null
        if [ ! -d $HOMEDIR/asl-backups ]; then
            mkdir $HOMEDIR/asl-backups
        fi
        cd / && tar czf $HOMEDIR/asl-backups/$FILEDATENAME.tgz --exclude='*.tgz' etc/asterisk >/dev/null

        chown -R $REALID.$REALID $HOMEDIR/asl-backups/$FILEDATENAME.tgz

        whiptail --msgbox "Backup $HOMEDIR/asl-backups/$FILEDATENAME.tgz complete." $msgbox_height $msgbox_width
    fi
}

do_local_conf_restore() {
    calc_wt_size
    echo "do_local_conf_restore" >>$logfile
    AST_RESTART=0

    #Build array of /etc/asterisk/*.tgz files
    shopt -s nullglob
    filearr=($HOMEDIR/asl-backups/*.tgz)
    file_count=${#filearr[@]}
    #echo ${#filearr[@]}
    #echo ${filearr[@]}

    # Restrict menu height to 10 backups
    if [ $file_count -gt 10 ]; then
        WT_MENU_HEIGHT=10
    else
        WT_MENU_HEIGHT=$file_count
    fi

    # build array of backups for radiolist
    if [ $file_count -eq 0 ]; then
        whiptail --msgbox "No available backups to restore." $msgbox_height $msgbox_width
    else
        newarr=()
        for i in ${!filearr[@]}; do
            #set last file to ON (selected)
            if [ $((i + 1)) -eq ${#filearr[@]} ]; then
                ONOFF="ON"
            else
                ONOFF="OFF"
            fi
            newarr+=("${filearr[$i]}" "" "$ONOFF")
        done
    fi
    #echo ${newarr[@]}; exit

    # select file for restore
    if [ $file_count -ne 0 ]; then
        selected_file=$(whiptail --title "$title" --radiolist "Restore: Use arrow keys to scroll. Space bar to select." $WT_HEIGHT 66 $WT_MENU_HEIGHT "${newarr[@]}" 3>&1 1>&2 2>&3)
        if [ $? = 0 ]; then
            cd / && tar xzf $selected_file
            AST_RESTART=1
            whiptail --msgbox "The $selected_file file has been restored." $msgbox_height $msgbox_width
        fi
    fi
}

do_local_conf_delete() {
    echo "do_local_conf_delete" >>$logfile
    #Build array of /etc/asterisk/*.tgz files
    shopt -s nullglob
    filearr=($HOMEDIR/asl-backups/*.tgz)
    file_count=${#filearr[@]}

    # Restrict menu height to 10 backups
    if [ $file_count -gt 10 ]; then
        WT_MENU_HEIGHT=10
    else
        WT_MENU_HEIGHT=$file_count
    fi

    # build array of backups for radiolist
    if [ $file_count -eq 0 ]; then
        whiptail --msgbox "No available backups to restore." $msgbox_height $msgbox_width
    else
        newarr=()
        for i in ${!filearr[@]}; do
            #set last file to ON (selected)
            if [ $((i + 1)) -eq ${#filearr[@]} ]; then
                ONOFF="ON"
            else
                ONOFF="OFF"
            fi
            newarr+=("${filearr[$i]}" "" "$ONOFF")
        done
    fi

    # select and confirm delete
    if [ $file_count -ne 0 ]; then
        selected_file=$(whiptail --title "$title" --radiolist "Delete: Use arrow keys to scroll. Space bar to select." $WT_HEIGHT 66 $WT_MENU_HEIGHT "${newarr[@]}" 3>&1 1>&2 2>&3)
        if [ $? = 0 ]; then
            whiptail --title "$title" --yesno "Confirm delete you want to delete backup file $selected_file?" --defaultno $msgbox_height $msgbox_width
            if [ $? = 0 ]; then
                cd / && rm -f $selected_file
                whiptail --msgbox "The backup file $selected_file has been deleted." $msgbox_height $msgbox_width
            fi
        fi
    fi
}

do_webserver_backup() {
    echo "do_webserver_backup" >>$logfile
    if [ -f /usr/bin/backup-server/router.php ]; then
        whiptail --msgbox "Open a web browser on separate computer and go to http://$GLOBALIP:8080 \n\nUse ctrl c to close the backup-server" $msgbox_height $msgbox_width
        /usr/bin/backup-server/backup-server.sh
    #       cd /usr/sbin/backup-server && sudo -u nobody /usr/bin/php -S 0.0.0.0:8080 -t . router.php
    else
        whiptail --msgbox "The backup-server software does not seem to be installed" $msgbox_height $msgbox_width
    fi
}

do_use_aslmenu() {
    # use asl-menu on login for user account
    ANSWER=1
    REALID=$(who am i | awk '{print $1}')
    if (whiptail --title "asl-menu at login" --yesno "Would you like to start the asl-menu script\nat login by default for user: $REALID?" --defaultno $msgbox_height $msgbox_width 3>&1 1>&2 2>&3); then
        ANSWER=$?
    fi
    if [ "$ANSWER" = "0" ]; then
        cat /home/$REALID/.bashrc | grep asl-menu >/dev/null
        if [ $? = "1" ]; then
            echo "sudo /usr/sbin/asl-menu" >>/home/$REALID/.bashrc
            whiptail --msgbox "asl-menu will start at login for user $REALID" $msgbox_height $msgbox_width
        else
            whiptail --msgbox "asl-menu already starts for user $REALID at login." $msgbox_height $msgbox_width
        fi
    else
        sed -i '/asl-menu/c\' /home/$REALID/.bashrc
        whiptail --msgbox "the asl-menu autostart at login has been disabled\nYou may run the asl-menu script by typing sudo /usr/sbin/asl-menu" $msgbox_height $msgbox_width
    fi
}

###################  security sub sections

do_set_precon_firewall() {
    echo "do_set_precon_firewall" >>$logfile
    do_is_fw_installed
    if [ $IPTAB_YN = "YES" ]; then
        do_is_f2b_installed
        if [ $F2B_YN = "YES" ]; then
            whiptail --msgbox "This will only allow the ports necessary for ASL to function.\nAll other ports will be blocked, fail2ban enabled." $msgbox_height $msgbox_width
            whiptail --msgbox "Using port numbers listed in current configuration files." $msgbox_height $msgbox_width
            get_node_info
            #  IF FAIL2BAN INSTALLED
            cat <<_EOF >$FIREWALLFILE
# Generated by asl-menu
*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:fail2ban-asterisk-tcp - [0:0]
:fail2ban-ssh - [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -s 192.168.0.0/16 -j ACCEPT
-A INPUT -s 10.0.0.0/24 -j ACCEPT
-A INPUT -s 172.16.0.0/20 -j ACCEPT
-A INPUT -p tcp -j fail2ban-asterisk-tcp
-A INPUT -p tcp -j fail2ban-ssh
-A INPUT -p udp -m udp --dport $IAXPORT -j ACCEPT
-A INPUT -p udp -m udp --dport $MGRPORT -j ACCEPT
-A INPUT -p udp -m udp --dport $ECHOPORT1 -j ACCEPT
-A INPUT -p udp -m udp --dport $ECHOPORT2 -j ACCEPT
-A INPUT -p udp -m udp --dport $RTCMPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $SSHPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $HTTPPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $HTTPSPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $IAXPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $ECHOPORT3 -j ACCEPT
-A INPUT -p tcp -m tcp --dport $MGRPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $RTCMPORT -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -j REJECT --reject-with icmp-port-unreachable
-A fail2ban-asterisk-tcp -j RETURN
-A fail2ban-ssh -j RETURN
COMMIT
_EOF

            $IPTABLES_RESTORE <$FIREWALLFILE
            whiptail --msgbox "Firewall rules installed and loaded." $msgbox_height $msgbox_width
        #reload firewall rules and set active.

        else

            whiptail --msgbox "This will only allow the ports necessary for ASL to function.\nAll other ports will be blocked." $msgbox_height $msgbox_width
            get_node_info
            # IF FAIL2BAN NOT INSTALLED

            cat <<_EOF >$FIREWALLFILE
# Generated by asl-menu
*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -s 192.168.0.0/16 -j ACCEPT
-A INPUT -s 10.0.0.0/24 -j ACCEPT
-A INPUT -s 172.16.0.0/20 -j ACCEPT
-A INPUT -p udp -m udp --dport $IAXPORT -j ACCEPT
-A INPUT -p udp -m udp --dport $MGRPORT -j ACCEPT
-A INPUT -p udp -m udp --dport $ECHOPORT1 -j ACCEPT
-A INPUT -p udp -m udp --dport $ECHOPORT2 -j ACCEPT
-A INPUT -p udp -m udp --dport $RTCMPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $SSHPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $HTTPPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $HTTPSPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $IAXPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $ECHOPORT3 -j ACCEPT
-A INPUT -p tcp -m tcp --dport $MGRPORT -j ACCEPT
-A INPUT -p tcp -m tcp --dport $RTCMPORT -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -j REJECT --reject-with icmp-port-unreachable
COMMIT
_EOF

            $IPTABLES_RESTORE <$FIREWALLFILE
            whiptail --msgbox "Firewall rules installed and loaded." $msgbox_height $msgbox_width
        #reload firewall rules and set active.
        fi
    else
        whiptail --msgbox "You may edit the firewall from the ASL Operating Systems Menu" $msgbox_height $msgbox_width
    fi
}

do_edit_firewall() {
    echo "do_edit_firewall" >>$logfile
    if [ ! -f $FIREWALLFILE ]; then
        whiptail --msgbox "Firewall config file $FIREWALLFILE not found, is firewall service installed?" $msgbox_height $msgbox_width
    else
        nano $FIREWALLFILE
        $IPTABLES_RESTORE <$FIREWALLFILE
        # loop while iptables fails to reload
        while [ $? = 1 ]; do
            whiptail --msgbox "Firewall failed to load edited configuration, we will reload the editor" $msgbox_height $msgbox_width
            nano $FIREWALLFILE
            $IPTABLES_RESTORE <$FIREWALLFILE
        done

    fi
    whiptail --msgbox "Firewall rules reloaded" $msgbox_height $msgbox_width
}

do_set_precon_fail2ban() {
    echo "do_set_precon_fail2ban" >>$logfile
    do_is_f2b_installed
    if [ $F2B_YN = "YES" ]; then
        whiptail --msgbox "This will install basic fail2ban filter rules to help protect against invalid login attempts" $msgbox_height $msgbox_width
        get_node_info
        cat <<_EOF >$FAIL2BANFILE
; use a semi-colon to comment out a line item
[ssh]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
bantime = 600
banaction = iptables-allports
findtime = 150
maxretry = 3
ignoreip = 127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
[asterisk-tcp]
enabled = true
port = $MGRPORT
filter = asterisk
logpath = /var/log/asterisk/messages
bantime = 600
banaction = iptables-allports
findtime = 300
maxretry = 5
ignoreip = 127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
[asterisk]
enabled  = true
filter   = asterisk
port     = iax,sip,sip-tls
protocol = all
logpath  = /var/log/asterisk/messages
maxretry = 5
ignoreip = 127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
_EOF

        whiptail --msgbox "File $FAIL2BANFILE created.\nRestarting fail2ban service with the new rules" $msgbox_height $msgbox_width
        $SERVICE fail2ban restart
    else
        whiptail --msgbox "You may edit the fail2ban rules from the ASL Operating System Menu" $msgbox_height $msgbox_width
    fi
}

do_edit_fail2ban() {
    echo "do_edit_fail2ban" >>$logfile
    if [ ! -f $FAIL2BANFILE ]; then
        whiptail --msgbox "Fail2ban $FAIL2BANFILE not found, is fail2ban service installed?" $msgbox_height $msgbox_width
    else
        nano $FAIL2BANFILE
        $SERVICE fail2ban restart >/dev/null
        # loop while fail2ban errors on reload
        while [ $? = 1 ]; do
            whiptail --msgbox "Fail2ban failed to load edited configuration, we will reload the editor." $msgbox_height $msgbox_width
            nano $FAIL2BANFILE
            $SERVICE fail2ban restart >/dev/null
        done
    fi
    whiptail --msgbox "Service fail2ban restarted with new rules." $msgbox_height $msgbox_width
}

do_set_blacklist() {
    echo "do_set_blacklist" >>$logfile
    sed -i "s/context[ \t]*=[ \t]*radio-secure/context = blacklist/" $CONFIGS/iax.conf
    sed -i "s/context[ \t]*=[ \t]*whitelist/context = blacklist/" $CONFIGS/iax.conf
    do_set_black_white_extensions_conf
    AST_RESTART=1
}

do_set_whitelist() {
    echo "do_set_whitelist" >>$logfile
    sed -i "s/context[ \t]*=[ \t]*radio-secure/context = whitelist/" $CONFIGS/iax.conf
    sed -i "s/context[ \t]*=[ \t]*blacklist/context = whitelist/" $CONFIGS/iax.conf
    do_set_black_white_extensions_conf
    AST_RESTART=1
}

do_set_noblkwhi() {
    echo "do_set_noblkwhi" >>$logfile
    sed -i "s/context[ \t]*=[ \t]*blacklist/context = radio-secure/" $CONFIGS/iax.conf
    sed -i "s/context[ \t]*=[ \t]*whitelist/context = radio-secure/" $CONFIGS/iax.conf
    whiptail --msgbox "Blacklist or Whitelist turned off\n\nAll nodes can connect now\nASL Asterisk restart required" $msgbox_height $msgbox_width
    AST_RESTART=1
}

do_set_black_white_extensions_conf() {
    echo "do_set_black_white_extensions_conf" >>$logfile
    cat $CONFIGS/extensions.conf | grep blacklist >/dev/null
    if [ $? = 1 ]; then
        echo '' >>$CONFIGS/extensions.conf
        echo '# added by asl-menu' >>$CONFIGS/extensions.conf
        echo '[blacklist]' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,1,NoOp(${CALLERID(num)})' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n,GotoIf($[${DB_EXISTS(blacklist/${CALLERID(num)})}]?blocked)' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n,Goto(radio-secure,${EXTEN},1)' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n(blocked),Hangup' >>$CONFIGS/extensions.conf
    fi

    cat $CONFIGS/extensions.conf | grep whitelist >/dev/null
    if [ $? = 1 ]; then
        echo '' >>$CONFIGS/extensions.conf
        echo '# added by asl-menu' >>$CONFIGS/extensions.conf
        echo '[whitelist]' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,1,NoOp(${CALLERID(num)})' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n,NoOp(${IAXPEER(CURRENTCHANNEL)})' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n,GotoIf($["${IAXPEER(CURRENTCHANNEL)}" = "127.0.0.1"]?radio-secure,${EXTEN},1)  ;permit local IPs' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n,GotoIf($[${DB_EXISTS(whitelist/${CALLERID(num)})}]?radio-secure,${EXTEN},1)' >>$CONFIGS/extensions.conf
        echo 'exten => _XXXX!,n,Hangup' >>$CONFIGS/extensions.conf
    fi
    whiptail --msgbox "Edit the blacklist or whitelist.\nASL Asterisk restart required." $msgbox_height $msgbox_width
    AST_RESTART=1
}

do_show_blacklist() {
    echo "do_show_blacklist" >>$logfile
    SHOWBLACKLIST=$($ASTERISK -rx "database show blacklist")
    whiptail --msgbox "Current nodes in banned blacklist:\n$SHOWBLACKLIST" $msgbox_height $msgbox_width
}

do_del_blacklist() {
    echo "do_del_blacklist" >>$logfile
    DELBLACKNODE=$(whiptail --inputbox "Enter node number to remove from banned blacklist." $msgbox_height $msgbox_width --title "Remove from ban list" 3>&1 1>&2 2>&3)
    $ASTERISK -rx "database del blacklist $DELBLACKNODE" >/dev/null
    whiptail --msgbox "Node $DELBLACKNODE removed from banned blacklist" $msgbox_height $msgbox_width
}

do_add_blacklist() {
    echo "do_add_blacklist" >>$logfile
    ADDBLACKNODE=$(whiptail --inputbox "Enter node number to ADD to banned blacklist." $msgbox_height $msgbox_width --title "Add to ban list" 3>&1 1>&2 2>&3)
    $ASTERISK -rx "database put blacklist $ADDBLACKNODE \"banned\"" >/dev/null
    whiptail --msgbox "Node $ADDBLACKNODE added to banned blacklist" $msgbox_height $msgbox_width
}

do_show_whitelist() {
    echo "do_show_whitelist" >>$logfile
    SHOWWHITELIST=$($ASTERISK -rx "database show whitelist")
    whiptail --msgbox "Current nodes in allowed whitelist:\n$SHOWWHITELIST" $msgbox_height $msgbox_width
}

do_del_whitelist() {
    echo "do_del_whitelist" >>$logfile
    DELWHITENODE=$(whiptail --inputbox "Enter node number to remove from allowed whitelist." $msgbox_height $msgbox_width --title "Remove from allowed list" 3>&1 1>&2 2>&3)
    $ASTERISK -rx "database del whitelist $DELWHITENODE" >/dev/null
    whiptail --msgbox "Node $DELWHITENODE removed from allowed whitelist" $msgbox_height $msgbox_width
}

do_add_whitelist() {
    echo "do_add_whitelist" >>$logfile
    ADDWHITENODE=$(whiptail --inputbox "Enter node number to ADD to allowed whitelist" $msgbox_height $msgbox_width --title "Add to allowed list" 3>&1 1>&2 2>&3)
    $ASTERISK -rx "database put whitelist $ADDWHITENODE \"allowed\"" >/dev/null
    whiptail --msgbox "Node $ADDWHITENODE added to allowed whitelist" $msgbox_height $msgbox_width
}

do_ssh_port() {
    echo "do_ssh_port" >>$logfile
    NEWSSHPORT=$(whiptail --inputbox "Current SSH port is $SSHPORT \nEnter new SSH port to use" $msgbox_height $msgbox_width "$SSHPORT" --title "SSH Port" 3>&1 1>&2 2>&3)
    #sed -i "s/^Port $SSHPORT/Port $NEWSSHPORT/" /etc/ssh/sshd_config
    sed -i "/Port $SSHPORT/c\Port $NEWSSHPORT" /etc/ssh/sshd_config
    $SERVICE ssh restart
    whiptail --msgbox "SSH port set to $NEWSSHPORT\nUpdate firewall and fail2ban to prevent being locked out if installed" $msgbox_height $msgbox_width
}

do_add_login_name() {
    echo "do_add_login_name" >>$logfile
    NEWUSERNAME_PASSWD1="A"
    NEWUSERNAME_PASSWD2="B"

    USERSLIST=$(awk -F'[/:]' '{if ($3 >= 1000 && $3 != 65534) print $1}' /etc/passwd)
    if (whiptail --title "Add user login?" --yesno "Current user login names are:\n$USERSLIST" $msgbox_height $msgbox_width); then
        NEWUSERNAME=$(whiptail --inputbox "Enter new login name you would like to add." $msgbox_height $msgbox_width --title "Login name add/change" 3>&1 1>&2 2>&3)
        # check if passwd1 = passwd2 if not re-enter
        while [ "$NEWUSERNAME_PASSWD1" != "$NEWUSERNAME_PASSWD2" ]; do
            whiptail --msgbox "Passwords must match" $msgbox_height $msgbox_width 3>&1 1>&2 2>&3
            NEWUSERNAME_PASSWD1=$(whiptail --passwordbox "please enter a password for $NEWUSERNAME" $msgbox_height $msgbox_width --title "password dialog" 3>&1 1>&2 2>&3)
            NEWUSERNAME_PASSWD2=$(whiptail --passwordbox "please verify password for $NEWUSERNAME" $msgbox_height $msgbox_width --title "password dialog" 3>&1 1>&2 2>&3)
        done
        # add user
        $USERADD $NEWUSERNAME -m -d /home/$NEWUSERNAME -s /bin/bash -G sudo
        echo -e "$NEWUSERNAME_PASSWD1\n$NEWUSERNAME_PASSWD1\n" | passwd $NEWUSERNAME
        # usermod -aG sudo $NEWUSERNAME
        echo "$NEWUSERNAME ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/010_$NEWUSERNAME-nopasswd
        if (whiptail --title "Copy Files" --yesno "Copy any files from user repeater you may have created to $NEWUSERNAME" $msgbox_height $msgbox_width); then
            cp -r /home/repeater/* /home/$NEWUSERNAME
            chown -R $NEWUSERNAME /home/$NEWUSERNAME
        fi
        # okay new user created and any files copied over.
        whiptail --msgbox "Please log in with the new user account and \nensure it has SUDO rights before deleting any users" $msgbox_height $msgbox_width
    else
        whiptail --msgbox "Not adding any users at this time" $msgbox_height $msgbox_width
    fi
}

do_delete_login_name() {
    echo "do_delete_login_name" >>$logfile
    USERSLIST=$(awk -F'[/:]' '{if ($3 >= 1000 && $3 != 65534) print $1}' /etc/passwd)
    DELETEUSERNAME=$(whiptail --inputbox "User login names available to DELETE:\n$USERSLIST\n\nEnter login name you would like to DELETE" 20 78 --title "Login name DELETE" 3>&1 1>&2 2>&3)
    if (whiptail --title "DELETE USER" --yesno "This will DELETE the user: $DELETEUSERNAM and all of the files in the /home/$DELETEUSERNAME folder \nThis can not be undone!\n\nAre you sure?" $msgbox_height $msgbox_width); then
        # lets not delete a user who is logged in and maybe running this script.
        if who -u | grep -q "^$DELETEUSERNAME"; then
            whiptail --msgbox "User $DELETEUSERNAME must be logged out to delete" $msgbox_height $msgbox_width
        else
            whiptail --msgbox "User $DELETEUSERNAME is NOT logged in" $msgbox_height $msgbox_width
            $USERDEL -f -r $DELETEUSERNAME
            rm -r /etc/sudoers.d/010_$DELETEUSERNAME-nopasswd
            whiptail --msgbox "User $DELETEUSERNAME and all of their files removed" $msgbox_height $msgbox_width
        fi
    else
        whiptail --msgbox "Not deleting any users at this time, returning to menu" $msgbox_height $msgbox_width
    fi
}

###################
## Menu Sections ##
###################

do_main_menu() {
    echo "do_main_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "Main Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Exit Main Menu" \
            "1" "First Time Setup" \
            "2" "Node Settings" \
            "3" "Simple USB Radio Interface Settings" \
            "4" "USB Radio w/DSP Interface Settings" \
            "5" "Enter a bash shell" \
            "6" "Enter the Asterisk CLI" \
            "7" "Asterisk Editor Menu" \
            "8" "Operating System Menu" \
            "9" "Security Menu" \
            "10" "Diagnostics Menu" \
            "11" "Backup and Restore Menu" \
            "12" "Logout/Reboot/Shutdown" \
            "I" "Information" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            do_finish
        else
            case "$FUN" in
            1) do_run_firsttime ;;
            2) do_node_setup ;;
            3) do_simpleusb_tune_menu ;;
            4) do_radio_tune_menu ;;
            5) do_bash_shell ;;
            6) do_asl_cli ;;
            7) do_conf_edit_menu ;;
            8) do_OS_menu ;;
            9) do_sys_security_menu ;;
            10) do_sys_diags_menu ;;
            11) do_backup_restore_menu ;;
            12) do_logout_menu ;;
            I) info_main_menu ;;
            *) whiptail --msgbox "Whoooops, script error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "There was an error running option $FUN" $msgbox_height $msgbox_width
        fi
    done
}

do_conf_edit_menu() {
    echo "do_conf_edit_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "Expert Configuration Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Back to Main" \
            "C" "Create a local backup" \
            "R" "Restore a local backup" \
            "1" "Edit rpt.conf file" \
            "2" "Edit extensions.conf file" \
            "3" "Edit iax.conf file" \
            "4" "Edit modules.conf file" \
            "5" "Edit manager.conf file" \
            "6" "Edit echolink.conf file" \
            "7" "Edit usbradio.conf file" \
            "8" "Edit simplusb.conf file" \
            "9" "Edit voter.conf file, RTCM users" \
            "10" "Edit savenode.conf" \
            "11" "Edit allmon2 config file" \
            "I" "Information" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            C) do_local_conf_backup ;;
            R) do_local_conf_restore ;;
            1) nano $CONFIGS/rpt.conf ;;
            2) nano $CONFIGS/extensions.conf ;;
            3) nano $CONFIGS/iax.conf ;;
            4) nano $CONFIGS/modules.conf ;;
            5) nano $CONFIGS/manager.conf ;;
            6) nano $CONFIGS/echolink.conf ;;
            7) nano $CONFIGS/usbradio.conf ;;
            8) nano $CONFIGS/simpleusb.conf ;;
            9) nano $CONFIGS/voter.conf ;;
            10) nano $CONFIGS/savenode.conf ;;
            11) do_edit_allmon_config ;;
            I) info_config_menu ;;
            *) whiptail --msgbox "Whoooops, script error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "There was an error running option $FUN" $msgbox_height $msgbox_width
        fi
    done
}

do_OS_menu() {
    echo "do_OS_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "OS Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Back to Main" \
            "1" "Run apt-get update" \
            "2" "Run apt-get upgrade" \
            "3" "Install/upgrade firewall" \
            "4" "Install/upgrade fail2ban" \
            "5" "Set hostname and domain name" \
            "6" "Set DHCP or STATIC IP" \
            "7" "Install ASL Addons Menu" \
            "8" "Change CPU performance (overclocking)" \
            "9" "Use asl-menu at login" \
            "I" "Information" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_apt_get_update ;;
            2) do_apt_get_upgrade ;;
            3) do_install_firewall ;;
            4) do_install_fail2ban ;;
            5) do_sethost ;;
            6) do_netsetup ;;
            7) do_addon_packages_menu ;;
            8) do_cpu_clocking_menu ;;
            9) do_use_aslmenu ;;
            I) info_OS_menu ;;
            *) whiptail --msgbox "Whoooops, script error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "There was an error running option $FUN" $msgbox_height $msgbox_width
        fi
    done
}

do_sys_security_menu() {
    echo "do_sys_security_menu" >>$logfile
    whiptail --msgbox "System security is the node managers responsibility. These tools may help protect your node." $msgbox_height $msgbox_width
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "Security Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button Back \
            "1" "Re-install ASL preconfigured firewall rules (basic)" \
            "2" "Edit firewall rules" \
            "3" "Re-install ASL preconfigured fail2ban rules (basic)" \
            "4" "Edit fail2ban rules" \
            "5" "Enable node blacklist/whitelist option" \
            "6" "Show node blacklist" \
            "7" "Delete from node blacklist" \
            "8" "Add to node blacklist" \
            "9" "Show node whitelist" \
            "10" "Delete from node whitelist" \
            "11" "Add to node whitelist" \
            "12" "Change SSH port number used" \
            "13" "Add user login with SUDO rights" \
            "14" "Delete user login" \
            "I" "Information" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_set_precon_firewall ;;
            2) do_edit_firewall ;;
            3) do_set_precon_fail2ban ;;
            4) do_edit_fail2ban ;;
            5) do_enable_blackwhite_list ;;
            6) do_show_blacklist ;;
            7) do_del_blacklist ;;
            8) do_add_blacklist ;;
            9) do_show_whitelist ;;
            10) do_del_whitelist ;;
            11) do_add_whitelist ;;
            12) do_ssh_port ;;
            13) do_add_login_name ;;
            14) do_delete_login_name ;;
            I) info_security_menu ;;
            *) whiptail --msgbox "Whoooops, script error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "There was an error running option $FUN" $msgbox_height $msgbox_width
        fi
    done
}

do_sys_diags_menu() {
    echo "do_sys_diags_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(
            whiptail --menu "System Diagnostics Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button Back \
                "1" "Ping Google DNS 8.8.8.8" \
                "2" "Ping register.allstarlink.org" \
                "3" "Show IAX2 registry" \
                "4" "Show ASL-Asterisk version" \
                "5" "Validate update node list service is running" \
                "6" "Restart update node list service" \
                "7" "Restart ASL Asterisk (astres.sh)" \
                "8" "Start ASL Asterisk (astup.sh)" \
                "9" "Stop ASL Asterisk (astdn.sh)" \
                "10" "Create diagnostic file for admins" \
                "I" "Information" \
                3>&1 1>&2 2>&3 #"10" "Create Upload file for ASL Admin Team" \
        )
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_ping_google_dns ;;
            2) do_ping_reg_asl ;;
            3) do_iax_show_reg ;;
            4) do_asl_version_show ;;
            5) do_validate_updatenodelist_running ;;
            6) do_updatenodelist_restart ;;
            7) do_astres ;;
            8) do_astup ;;
            9) do_astdn ;;
            10) do_upload_diag ;;
            I) info_diagnostics_menu ;;
            *) whiptail --msgbox "Whoooops, script error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "There was an error running option $FUN" $msgbox_height $msgbox_width
        fi
    done
}

do_enable_blackwhite_list() {
    echo "do_enable_blackwhite_list" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "Blacklist/Whitelist Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button Back \
            "1" "Enable using Blacklist" \
            "2" "Enable using Whitelist" \
            "3" "Disable filters Open to all nodes" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_set_blacklist ;;
            2) do_set_whitelist ;;
            3) do_set_noblkwhi ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "Invalid option, please try again" $msgbox_height $msgbox_width
        fi
    done
}

do_cpu_clocking_menu() {
    echo "do_cpu_clocking_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "CPU Governor Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button Back \
            "1" "Install/upgrade CPU clocking packages" \
            "2" "Set on-demand governor (default)" \
            "3" "Set conservative governor" \
            "4" "Set performance governor" \
            "5" "Set powersave governor" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_install_cpu_clocking ;;
            2) do_set_cpu_ondemand ;;
            3) do_set_cpu_conservative ;;
            4) do_set_cpu_performance ;;
            5) do_set_cpu_powersave ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "Invalid option, please try again" $msgbox_height $msgbox_width
        fi
    done
}

do_addon_packages_menu() {
    echo "do_addon_packages_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --menu "Add-on Packages Menu" --title "$title" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button Back \
            "1" "Information" \
            "2" "Install Allmon2" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) info_asl_addons_menu ;;
            2) do_install_allmon ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "Invalid option, please try again" $msgbox_height $msgbox_width
        fi
    done
}

do_backup_restore_menu() {
    echo "do_backup_restore_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --title "$title" --menu "Backup/Restore Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Back to Main" \
            "1" "Backup node to https://backup.allstarlink.org" \
            "2" "Restore node from https://backup.AllStarLink.org" \
            "3" "Backup node to local file" \
            "4" "Restore node from local backup files" \
            "5" "Delete a local backup file" \
            "6" "Start webserver for backup/restore" \
            "I" "Information" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_savenode ;;
            2) do_restorenode ;;
            3) do_local_conf_backup ;;
            4) do_local_conf_restore ;;
            5) do_local_conf_delete ;;
            6) do_webserver_backup ;;
            I) info_backup_restore_menu ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "Invalid option, please try again." $msgbox_height $msgbox_width
        fi
    done
}

do_logout_menu() {
    echo "do_logout_menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --title "$title" --menu "Exit Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Back to Main" \
            "1" "Shutdown Server" \
            "2" "Reboot Server" \
            "3" "Restart Asterisk" \
            "4" "Exit and Logout" \
            "I" "Information" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_shutdown ;;
            2) do_reboot ;;
            3) do_astres ;;
            4) do_logout ;;
            I) info_exit_menu ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" $msgbox_height $msgbox_width ;;
            esac || whiptail --msgbox "Invalid option, please try again." $msgbox_height $msgbox_width
        fi
    done
}

####################  Main body
check_if_root
get_node_info
get_time_stamps
check_config_files
do_main_menu
clear
exit 0
