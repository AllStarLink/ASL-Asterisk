#!/bin/bash
#AllStarLink Asterisk configure script
#by N8THN Feb. 012, 2018
#VERSION 1.90
#release date 20180323-1
# Major rework by WD6AWP April 2021
#  There are those who call me... Tim?

/usr/bin/clear
#INTERACTIVE=True
CONFIGS=/etc/asterisk
AST_RESTART=0
#logfile=/dev/null
logfile=/tmp/node-setup.log
title="ASL 2.0.0-Beta"
msgbox_height=12
msgbox_width=60

read -r -d '' main_menu_text << EOT
Node Setup Main Menu Instructions

Menu item 1 is where you'll configure most of the basic
setting for your AllStar node. For servers with more
than one node or advance settings you'll need to use an
editor/sftp client such as WinSCP. But don't worry,
everything you need to get your node on the air is here.

Before changing any settings you should make a local
backup with menu item C. If something goes wrong you'll
be able to restore with menu item R.

Changes will go into effect once Asterisk is restarted
with menu item 2.

If this is a new setup, you should do all of item 1, then
do menu items 2 and 3. That should be all that is needed
to get your node up and running.

For help see https://community.allstarlink.org
EOT

read -r -d '' node_setup_menu_text << EOT
Node Setup Menu Instructions

For new nodes you will need to choose values each one of
these items.

1 Duplex is explained when selected. Most often you will
  set it to 1.
2 The node number you were assigned by AllStarLink.org
3 The node password you were assigned along with your node
  number. Node number and node password is how your node
  connects to the AllStarLink network.
4 Your ham radio call sign.
5 AMI password for Allmon and Supermon. The AMI password
  allows Allmon and Supermon monitor and control your node
  from a web browser.
6 Type of radio interface. Most often you will use
  simple USB.
7 Send statistics yes or no to stats.allstarlink.org
  Allows you and others to see the status and connections
  of your node including on a map.

For help see https://community.allstarlink.org
EOT

do_dummy_yesno() {
    whiptail --title "$title" --yesno "Select Yes, NO or press escape." $msgbox_height $msgbox_width
    rc=$?
    if [[ rc -eq 0 ]]; then
        whiptail --msgbox "$rc Yes" 20 60
    elif [[ rc -eq 1 ]]; then
        whiptail --msgbox "$rc No" 20 60
    else
        whiptail --msgbox "$rc Escape or other" 20 60
    fi
}

##############################
# check if root
if [ $(whoami) != root ]; then
    whiptail --msgbox "This script must be run as root or with sudo" 20 60
    exit
fi

if [ ! -f $CONFIGS/rpt.conf ]; then
    whiptail --msgbox "Config files not in $CONFIGS directory Exiting" 20 60
    exit
fi

calc_wt_size() {
    echo "doing calc_wt_size" >>$logfile
    ##WT_WIDTH=$(tput cols)
    # Bash knows the terminal size
    # echo "The number of columns are $COLUMNS"
    # echo "The number of lines are $LINES"

    if [ $LINES -lt 22 ]; then
        echo "Teaminal size must be at least 22 lines."
        exit
    fi
    if [ $COLUMNS -lt 60 ]; then
        echo "Teaminal size must be at least 60 columns."
        exit
    fi

    WT_HEIGHT=22

    # Leave full width up to 100 columns
    WT_WIDTH=$COLUMNS
    if [ $COLUMNS -gt 100 ]; then
        WT_WIDTH=100
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT - 8))
}

do_set_env() {
    echo "doing do_set_env" >>$logfile

    REALID=$(who am i | awk '{print $1}')
    if [ $REALID == "root" ]; then
        HOMEDIR=/$REALID
    else
        HOMEDIR="/home/$REALID"
    fi
}

get_time_stamps() {
    MONTHDAY=$(date +%Y-%m-%d)
    DATEEXT=$(date +%Y-%m-%d.%H:%M)
    FILEDATENAME=$(date +ASL_%Y-%m-%d_%H%M)
}

do_local_conf_backup() {
    echo "do_local_conf_backup" >>$logfile
    get_time_stamps

    whiptail --title "$title" --yesno "Local backup to file $FILEDATENAME.tgz?" $msgbox_height $msgbox_width
    if [ $? -eq 0 ]; then
        if [ ! -d $HOMEDIR/asl-backups ]; then
            mkdir $HOMEDIR/asl-backups
        fi
        cd / && tar czf $HOMEDIR/asl-backups/$FILEDATENAME.tgz --exclude='*.tgz' etc/asterisk >/dev/null
        chown -R $REALID.$REALID $HOMEDIR/asl-backups/$FILEDATENAME.tgz
        whiptail --msgbox "Backup $HOMEDIR/asl-backups/$FILEDATENAME.tgz complete." $msgbox_height $msgbox_width
    fi
}

do_local_conf_restore() {
    calc_wt_size
    echo "do_local_conf_restore" >>$logfile
    #AST_RESTART=0

    #Build array of /etc/asterisk/*.tgz files
    shopt -s nullglob
    filearr=($HOMEDIR/asl-backups/*.tgz)
    file_count=${#filearr[@]}
    #echo ${#filearr[@]}
    #echo ${filearr[@]}

    # Restrict menu height to 10 backups
    if [ $file_count -gt 10 ]; then
        WT_MENU_HEIGHT=10
    else
        WT_MENU_HEIGHT=$file_count
    fi

    # build array of backups for radiolist
    if [ $file_count -eq 0 ]; then
        whiptail --msgbox "No available backups to restore." $msgbox_height $msgbox_width
    else
        newarr=()
        for i in ${!filearr[@]}; do
            #set last file to ON (selected)
            if [ $((i + 1)) -eq ${#filearr[@]} ]; then
                ONOFF="ON"
            else
                ONOFF="OFF"
            fi
            newarr+=("${filearr[$i]}" "" "$ONOFF")
        done
    fi
    #echo ${newarr[@]}; exit

    # select file for restore
    if [ $file_count -ne 0 ]; then
        selected_file=$(whiptail --title "$title" --radiolist "Restore: Use arrow keys to scroll. Space bar to select." $WT_HEIGHT 66 $WT_MENU_HEIGHT "${newarr[@]}" 3>&1 1>&2 2>&3)
        if [ $? = 0 ]; then
            cd / && tar xzf $selected_file
            AST_RESTART=1
            whiptail --msgbox "The $selected_file file has been restored." $msgbox_height $msgbox_width
        fi
    fi
}

do_load_initial_settings() {
    whiptail --title "$title" --msgbox "Load initial settings is not implemented yet" $msgbox_height $msgbox_width
}

do_select_statpost() {
    # un/comments the statpost command in rpt.conf
    echo "doing do_rpt_statpost" >>$logfile
    whiptail --title "$title" --yesno "Enabling Status posting to stats.allstarlink.org?" $msgbox_height $msgbox_width
    rc=$?
    if [[ rc -eq 0 ]]; then
        #whiptail --msgbox "$rc Yes" 20 60
        sed -i "/^;\s*statpost_url\s*=/ s/;\s*statpost_url/statpost_url/" $CONFIGS/rpt.conf

    elif [[ rc -eq 1 ]]; then
        #whiptail --msgbox "$rc No" 20 60
        sed -i "/^statpost_url\s*=/ s/statpost_url/;statpost_url/" $CONFIGS/rpt.conf
    else
        #whiptail --msgbox "$rc Escape or other" 20 60
        return
    fi
}

do_select_duplex() {
    echo "doing do_new_duplex" >>$logfile
    test=$(whiptail --title "$title" --inputbox "\
Select Duplex type:

 0 = Half duplex with no telemetry tones
 1 = Half duplex with telemetry tones (simplex node)
 2 = Full Duplex with telemetry tones (repeater)
 3 = Full Duplex with telemetry, but no repeated audio.
 4 = Full Duplex with telemetry (Special use)

The most common types are (1) or (2)

See wiki.allstarlink.org for full documentation.\
" 20 60 "$CURRENT_DUPLEX" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        re=^[0-4]$
        if ! [[ $test =~ $re ]]; then
            whiptail --msgbox "Duplex type must be a number between 0 and 4." 20 60
        elif [[ $test != $CURRENT_DUPLEX ]]; then
            NEW_DUPLEX=$test
            do_set_duplex
        fi
    fi
}

do_set_duplex() {
    echo "doing do_rpt_duplex" >>$logfile
    sed -i "/^duplex\s*=\s*/s/$CURRENT_DUPLEX/$NEW_DUPLEX/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_select_node_number() {
    test=$(whiptail --inputbox "Current Node Number is $CURRENT_NODE Enter New Node Number" 8 78 "$CURRENT_NODE" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        re=^[0-9]\+$
        if ! [[ $test =~ $re ]]; then
            whiptail --msgbox "Node number must be a number, usually 3 or more digits." 20 60
        elif [[ $test != $CURRENT_NODE ]]; then
            NEW_NODE=$test
            do_set_node_number
        fi
    fi
}

do_set_node_number() {
    echo "doing do_set_node_number" >>$logfile
    sed -i "s/$CURRENT_NODE/$NEW_NODE/g" $CONFIGS/rpt.conf
    sed -i "/^NODE\s*=\s*[0-9]\+/ s/$CURRENT_NODE/$NEW_NODE/" $CONFIGS/extensions.conf
    sed -i "/^register.*=\s*$CURRENT_NODE/ s/$CURRENT_NODE/$NEW_NODE/" $CONFIGS/iax.conf
    sed -i "/^NODE\s*=\s*$CURRENT_NODE/ s/$CURRENT_NODE/$NEW_NODE/" $CONFIGS/savenode.conf
    AST_RESTART=1;
}

do_select_node_password() {
    test=$(whiptail --inputbox "Enter password for Node $NEW_NODE" 8 78 "$CURRENT_PASSWD" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        re=^[0-9a-zA-Z_-]{6,}$
        if ! [[ $test =~ $re ]]; then
            whiptail --msgbox "Node password may only contain letters, numbers, underscore and dash. It must be 6 or more characters in length." 20 60
        elif [[ "$test" != "$CURRENT_PASSWD" ]]; then
            NEW_PASSWD=$test
            do_set_node_password
        fi
    fi
}

do_set_node_password() {

    # Test for existing uncommented register line. New nodes won't have one.
    if grep -q "^register" $CONFIGS/iax.conf ; then
        sed -i "/^register.*=\s*$CURRENT_NODE:$CURRENT_PASSWD@/ s/$CURRENT_PASSWD/$NEW_PASSWD/" $CONFIGS/iax.conf

        # This is for http registration with an alternate port. ie register=<node>#<port>:<passwd>@register.allstarlink.org
        sed -i "/^register\s*=\s*$CURRENT_NODE#.\+:$CURRENT_PASSWD@/ s/$CURRENT_PASSWD/$NEW_PASSWD/" $CONFIGS/iax.conf
    else
        # No uncomment register line so add one.
        new_register_line="register=$CURRENT_NODE:$NEW_PASSWD@register.allstarlink.org   ;added by node-setup"
        sed -i "/^;\s*register.*=.*/a $new_register_line" $CONFIGS/iax.conf
    fi
    sed -i "/^PASSWORD\s*=\s*$CURRENT_PASSWD/ s/$CURRENT_PASSWD/$NEW_PASSWD/" $CONFIGS/savenode.conf
    AST_RESTART=1;
}

do_select_node_callsign() {
    test=$(whiptail --inputbox "Enter Call Sign for Node $NEW_NODE" 8 78 "$CURRENT_CALLSIGN" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        re=^[0-9A-Z]{3,}$
        if ! [[ $test =~ $re ]]; then
            whiptail --msgbox "Call sign may only uppercase letters and numbers. It must be 3 or more characters in length." 20 60
        elif [[ $test != $CURRENT_CALLSIGN ]]; then
            NEW_CALLSIGN=$test
            do_set_node_callsign
        fi
    fi
}

do_set_node_callsign() {
    sed -i "/^idrecording\s*=\s*|i$CURRENT_CALLSIGN/ s/$CURRENT_CALLSIGN/$NEW_CALLSIGN/" $CONFIGS/rpt.conf
    sed -i "/^idtalkover\s*=\s*|i$CURRENT_CALLSIGN/ s/$CURRENT_CALLSIGN/$NEW_CALLSIGN/" $CONFIGS/rpt.conf
    AST_RESTART=1;
}

do_select_ami_secret() {
    echo "doing do_mngr_secret" >>$logfile
    test=$(whiptail --inputbox "Enter AMI secret for Allmon and Supermon" 8 78 "$CURRENT_AMI_SECRET" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        re=^[0-9a-zA-Z_-]{12,}$
        if ! [[ $test =~ $re ]]; then
            whiptail --msgbox "AMI secret may only contain letters, numbers, underscore and dash. It must be 12 or more characters in length." 20 60
        elif [[ $test != $CURRENT_AMI_SECRET ]]; then
            NEW_AMI_SECRET=$test
            do_set_ami_secret
        fi
    fi
}

do_set_ami_secret() {
    sed -i "/^secret\s*=\s*$CURRENT_AMI_SECRET/ s/$CURRENT_AMI_SECRET/$NEW_AMI_SECRET/" $CONFIGS/manager.conf
    AST_RESTART=1;
    #do_write_mngr_secret
    #do_build_allmon
}

do_select_interface() {
    ## interface MENU
    echo "doing do_interface_type" >>$logfile
    FUN=$(whiptail --title "$title" --menu "Select Radio Interface" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "1" "SimpleUSB: CM1xx USB Cards no/DSP (URIx or RA-40)" \
        "2" "USBRadio: CM1xx USB Cards with DSP (URIx or RA-40)" \
        "3" "RTCM: Radio Thin Client or Voter Boards" \
        "4" "Dahdi/pseudo: No radio interface or HUB node" \
        "5" "PCI Quad Radio Card" \
        "6" "Rpi Beagle Board" \
        "7" "USRP" \
        3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        case "$FUN" in
        1) do_set_simpleusb ;;
        2) do_set_usbradio ;;
        3) do_set_voter ;;
        4) do_set_pseudo ;;
        5) do_set_quadradio ;;
        6) do_set_beagle ;;
        7) do_set_usrp ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac
    fi
}

do_noload_chan_modules() {
    # Set common app_rpt channel modules to noload
    sed -i "/^load\s*=>\s*chan_simpleusb/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_usbradio/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_usrp/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_voter/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_pi/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_beagle/ s/load/noload/" $CONFIGS/modules.conf

    # Comment all rxchannels.
    sed -i "s/^rxchannel/; rxchannel/g" $CONFIGS/rpt.conf
}

do_set_simpleusb() {
    do_noload_chan_modules
    echo "doing do_set_simpleusb" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_simpleusb/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*SimpleUSB/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_usbradio() {
    do_noload_chan_modules
    echo "doing do_set_usbradio" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_usbradio/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Radio/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_voter() {
    do_noload_chan_modules
    echo "doing do_set_voter" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_voter/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Voter/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_pseudo() {
    do_noload_chan_modules
    echo "doing do_set_pesudo" >>$logfile

    # Load module (is chan_dahdi always loaded?) and set rxchannel
    sed -i "/^noload.\+chan_dahdi/ s/noload/load/" $CONFIGS/modules.conf
    sed -i '/^;\s*rxchannel\s*=\s*dahdi\/pseudo/ s/;\s*rxchannel/rxchannel/' $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_quadradio() {
    do_noload_chan_modules
    echo "doing do_set_quad" >>$logfile

    # Set rxchannel (No dahdi/pesudo module?)
    sed -i "/^;\s*rxchannel\s*=\s*Dahdi/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_beagle() {
    do_noload_chan_modules
    echo "doing do_set_beagle" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_beagle/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Beagle/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_usrp() {
    do_noload_chan_modules
    echo "doing do_set_usrp" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_usrp/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*USRP/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

get_node_settings () {
    #sed remove first and last character
    CURRENT_NODE=$(grep -o '^\[[0-9]*\]' $CONFIGS/rpt.conf | sed 's/^.//;s/.$//')

    #sed captures everything between : and @
    CURRENT_PASSWD=$(grep '^register.*=\s*' $CONFIGS/iax.conf | sed 's/.*:\(.*\)@.*/\1/')
    if [[ -z $CURRENT_PASSWD ]]; then
        CURRENT_PASSWD='Not Set'
    fi

    #sed captures alphanumeric between |i and the rest of line
    #CURRENT_CALLSIGN=$(grep '^idrecording\s*=\s*' $CONFIGS/rpt.conf | sed 's/.*|i\([0-9a-zA-Z]*\).*/\1/')
    CURRENT_CALLSIGN=$(grep '^idrecording\s*=\s*' $CONFIGS/rpt.conf | sed 's/.*|i\([0-9a-zA-Z/-]*\).*/\1/')

    #sed captures digits after =
    CURRENT_DUPLEX=$(grep '^duplex\s*=\s*' $CONFIGS/rpt.conf | sed 's/^duplex\s*=\s*\([0-9]*\).*/\1/')

    #sed removes all before = and any after ;
    CURRENT_INTERFACE=$(grep '^rxchannel\s*=\s*' $CONFIGS/rpt.conf | sed 's/^rxchannel\s*=\s*//;s/\s*;.*$//')

    #sed removes all before = and any after ;
    CURRENT_AMI_SECRET=$(grep '^secret\s*=\s*' $CONFIGS/manager.conf | sed 's/^secret\s*=\s*//;s/\s*;.*$//')

    test=$(grep -c "^;statpost_url\s*=" $CONFIGS/rpt.conf)
    if [[ $test -eq 1 ]]; then
        CURRENT_STATPOST="No"
    else
        CURRENT_STATPOST="Yes"
    fi
}

do_interface_tune_cli() {
    get_node_settings
    if [[ $CURRENT_INTERFACE == *"SimpleUSB"* ]]; then
        clear
        /usr/sbin/simpleusb-tune-menu
        if [ $? -ne 0 ]; then
            whiptail --title "$title" --msgbox "Simple USB CLI did not launch. Try restarting Asterisk." $msgbox_height $msgbox_width
        fi
    elif [[ $CURRENT_INTERFACE == *"Radio/usb"* ]]; then
        clear
        /usr/sbin/radio-tune-menu
        if [ $? -ne 0 ]; then
            whiptail --title "$title" --msgbox "USB Radio CLI did not launch. Try restarting Asterisk." $msgbox_height $msgbox_width
        fi
    elif [[ $CURRENT_INTERFACE == *"pseudo"* ]]; then
        whiptail --title "$title" --msgbox "We're good. dahdi/pseudo has no interface settings." $msgbox_height $msgbox_width
    else
        whiptail --title "$title" --msgbox "$CURRENT_INTERFACE is not supported. Use editor." $msgbox_height $msgbox_width
    fi
}

do_asterisk_setup_menu() {
    echo "Node Setup Menu" >>$logfile
    while true; do
        calc_wt_size
        get_node_settings

        FUN=$(whiptail --title "$title" --menu "AllStar Node Setup Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
            "1" "Duplex type: $CURRENT_DUPLEX" \
            "2" "Node Number: $CURRENT_NODE" \
            "3" "Node Password: $CURRENT_PASSWD" \
            "4" "Node Callsign: $CURRENT_CALLSIGN" \
            "5" "AMI Password: $CURRENT_AMI_SECRET" \
            "6" "Radio Interface: $CURRENT_INTERFACE" \
            "7" "Post Node Status: $CURRENT_STATPOST" \
            "I" "Node Setup Menu Instructions" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_select_duplex ;;
            2) do_select_node_number ;;
            3) do_select_node_password ;;
            4) do_select_node_callsign ;;
            5) do_select_ami_secret ;;
            6) do_select_interface ;;
            7) do_select_statpost ;;
            I) whiptail --msgbox "$node_setup_menu_text" --title "$title" 30 65 ;;
            *) whiptail --msgbox "Sorry! $test is an unrecognized selection at this time." 20 60 ;;
            esac
        fi
    done
}

do_main_menu() {
    echo "Node Setup Main Menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --title "$title" --menu "Node Setup Main Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Exit Node Setup" \
            "1" "AllStar Node Setup Menu" \
            "2" "Restart Asterisk" \
            "3" "Interface Tune CLI" \
            "4" "Load Initial AllStar Settings" \
            "C" "Create a local backup" \
            "R" "Restore a local backup" \
            "I" "Main Menu Instructions" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            do_exit
        else
            case "$FUN" in
            1) do_asterisk_setup_menu ;;
            2) AST_RESTART=0; astres.sh; clear ;;
            3) do_interface_tune_cli ;;
            4) do_load_initial_settings ;;
            C) do_local_conf_backup ;;
            R) do_local_conf_restore ;;
            I) whiptail --msgbox "$main_menu_text" --title "$title" 30 65 ;;
            *) whiptail --msgbox "$FUN is unrecognized option." 20 60 ;;
            esac
        fi
    done
}

do_exit() {
    echo "doing do_exit" >>$logfile
    if [ $AST_RESTART -eq 1 ]; then
        if (whiptail --title "$title" --yesno "Asterisk must be restarted to make changes.\n\nAre you sure you want to exit?" 12 78); then
            exit 0
        else
            do_main_menu
        fi
    else
        exit 0
    fi
}

do_set_env
do_main_menu