#!/bin/bash
#AllStarLink Asterisk configure script
#by N8THN Feb. 012, 2018
#VERSION 1.90
#release date 20180323-1
# Major rework by WD6AWP April 2021
#  There are those who call me... Tim?

/usr/bin/clear
#INTERACTIVE=True
CONFIGS=/etc/asterisk
#TMP=/tmp
#MONTHDAY=$(date +%Y-%m-%d)
#DATEEXT=$(date +%Y-%m-%d.%H:%M)
#REBOOT_NEEDED=0
AST_RESTART=0
#logfile=/dev/null
logfile=/tmp/node_setup_whip.log
title="ASL 2.0.0-Beta"
msgbox_height=12
msgbox_width=60


##############################
# check if root
if [ $(whoami) != root ]; then
    whiptail --msgbox "This script must be run as root or with sudo" 20 60 2
    exit
fi

if [ ! -f $CONFIGS/rpt.conf ]; then
    whiptail --msgbox "Config files not in $CONFIGS directory Exiting" 20 60 2
    exit 1
fi

calc_wt_size() {
    echo "doing calc_wt_size" >>$logfile
    ##WT_WIDTH=$(tput cols)
    # Bash knows the terminal size
    # echo "The number of columns are $COLUMNS"
    # echo "The number of lines are $LINES"

    if [ $LINES -lt 22 ]; then
        echo "Teaminal size must be at least 22 lines."
        exit
    fi
    if [ $COLUMNS -lt 60 ]; then
        echo "Teaminal size must be at least 60 columns."
        exit
    fi

    WT_HEIGHT=22

    # Leave full width up to 100 columns
    WT_WIDTH=$COLUMNS
    if [ $COLUMNS -gt 100 ]; then
        WT_WIDTH=100
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT - 8))
}

do_set_env() {
    echo "doing do_create_tmp_env" >>$logfile
    # mkdir -p $TMP
    # cp -f $CONFIGS/extensions.conf $TMP/extensions.conf.tmp
    # cp -f $CONFIGS/echolink.conf $TMP/echolink.conf.tmp
    # cp -f $CONFIGS/iax.conf $TMP/iax.conf.tmp
    # cp -f $CONFIGS/modules.conf $TMP/modules.conf.tmp
    # cp -f $CONFIGS/rpt.conf $TMP/rpt.conf.tmp
    # cp -f $CONFIGS/savenode.conf $TMP/savenode.conf.tmp
    # cp -f $CONFIGS/manager.conf $TMP/manager.conf.tmp
    # cp -f $CONFIGS/usbradio.conf $TMP/usbradio.conf.tmp
    # cp -f $CONFIGS/simpleusb.conf $TMP/simpleusb.conf.tmp
    # cp -f $CONFIGS/voter.conf $TMP/voter.conf.tmp
    # CURRENT_NODE=$(grep -o '^\[[0-9]*\]' $TMP/rpt.conf.tmp | sed 's/.*\[\([^]]*\)\].*/\1/g')
    # CURRENT_REG1=$(grep -e 'register[ \t]*=[ \t]*' $TMP/iax.conf.tmp | awk -F'=' '{print $2}' | awk -F'   ;' '{print $1}')
    # CURRENT_REG=$(echo "$CURRENT_REG1" | awk -F'@' '{print $1}')
    # CURRENT_REG_NODE=$(echo "$CURRENT_REG" | awk -F':' '{print $1}')
    # CURRENT_REG_PSWD=$(echo "$CURRENT_REG" | awk -F':' '{print $2}')
    # CURRENT_CALLSIGN=$(grep '^idrecording\s*=\s*' $CONFIGS/rpt.conf | awk -F'=' '{print $2}' | sed 's/\s*|\i//' | sed -e 's/^\(.\{9\}\).*/\1/')
    # ###     CURRENT_DUPLEX=$(grep '^duplex =' $TMP/rpt.conf.tmp | awk -F '=' '{print $2}' | grep -B1 ";")
    # CURRENT_DUPLEX=$(grep '^duplex =' $TMP/rpt.conf.tmp | awk -F " " '{print $3}')
    # NEWNODE="$CURRENT_NODE"
    # NEWCALL="$CURRENT_CALLSIGN"
    # NEWPSWD="$CURRENT_REG_PSWD"
    # CURRENT_INTERFACE=$(grep '^rxchannel' $TMP/rpt.conf.tmp | awk -F'=' '{print $2}' | awk -F'  ;' '{print$1}')
    # NEWIFACE="$CURRENT_INTERFACE"
    # NEWDUPLEX="$CURRENT_DUPLEX"
    # CURRENTMNGRSECRET=$(grep 'secret' $TMP/manager.conf.tmp | awk -F '= ' '{print $2}' | grep -o '^\S*')
    # NEWMNGRSECRET="$CURRENTMNGRSECRET"
    # echo "Start node configurations date/time is $DATEEXT" >>$logfile
    # echo "CURRENT_NODE var is $CURRENT_NODE" >>$logfile
    # echo "CURRENT_REG_PSWD var is $CURRENT_REG_PSWD" >>$logfile
    # echo "CURRENT_CALLSIGN var is $CURRENT_CALLSIGN" >>$logfile
    # echo "CURRENT_INTERFACE var is $CURRENT_INTERFACE" >>$logfile

    REALID=$(who am i | awk '{print $1}')
    if [ $REALID == "root" ]; then
        HOMEDIR=$REALID
    else
        HOMEDIR="/home/$REALID"
    fi
}

get_time_stamps() {
    MONTHDAY=$(date +%Y-%m-%d)
    DATEEXT=$(date +%Y-%m-%d.%H:%M)
    FILEDATENAME=$(date +ASL_%Y-%m-%d_%H%M)
}

do_local_conf_backup() {
    echo "do_local_conf_backup" >>$logfile
    get_time_stamps

    whiptail --title "$title" --yesno "Local backup to file $FILEDATENAME.tgz?" $msgbox_height $msgbox_width
    if [ $? -eq 0 ]; then
        if [ ! -d $HOMEDIR/asl-backups ]; then
            mkdir $HOMEDIR/asl-backups
        fi
        cd / && tar czf $HOMEDIR/asl-backups/$FILEDATENAME.tgz --exclude='*.tgz' etc/asterisk >/dev/null
        chown -R $REALID.$REALID $HOMEDIR/asl-backups/$FILEDATENAME.tgz
        whiptail --msgbox "Backup $HOMEDIR/asl-backups/$FILEDATENAME.tgz complete." $msgbox_height $msgbox_width
    fi
}

do_local_conf_restore() {
    calc_wt_size
    echo "do_local_conf_restore" >>$logfile
    #AST_RESTART=0

    #Build array of /etc/asterisk/*.tgz files
    shopt -s nullglob
    filearr=($HOMEDIR/asl-backups/*.tgz)
    file_count=${#filearr[@]}
    #echo ${#filearr[@]}
    #echo ${filearr[@]}

    # Restrict menu height to 10 backups
    if [ $file_count -gt 10 ]; then
        WT_MENU_HEIGHT=10
    else
        WT_MENU_HEIGHT=$file_count
    fi

    # build array of backups for radiolist
    if [ $file_count -eq 0 ]; then
        whiptail --msgbox "No available backups to restore." $msgbox_height $msgbox_width
    else
        newarr=()
        for i in ${!filearr[@]}; do
            #set last file to ON (selected)
            if [ $((i + 1)) -eq ${#filearr[@]} ]; then
                ONOFF="ON"
            else
                ONOFF="OFF"
            fi
            newarr+=("${filearr[$i]}" "" "$ONOFF")
        done
    fi
    #echo ${newarr[@]}; exit

    # select file for restore
    if [ $file_count -ne 0 ]; then
        selected_file=$(whiptail --title "$title" --radiolist "Restore: Use arrow keys to scroll. Space bar to select." $WT_HEIGHT 66 $WT_MENU_HEIGHT "${newarr[@]}" 3>&1 1>&2 2>&3)
        if [ $? = 0 ]; then
            cd / && tar xzf $selected_file
            AST_RESTART=1
            whiptail --msgbox "The $selected_file file has been restored." $msgbox_height $msgbox_width
        fi
    fi
}

# do_tmp_to_live() {
#     echo "doing do_tmp_to_live" >>$logfile
#     mv -f $TMP/extensions.conf.tmp $CONFIGS/extensions.conf
#     mv -f $TMP/echolink.conf.tmp $CONFIGS/echolink.conf
#     mv -f $TMP/iax.conf.tmp $CONFIGS/iax.conf
#     mv -f $TMP/modules.conf.tmp $CONFIGS/modules.conf
#     mv -f $TMP/rpt.conf.tmp $CONFIGS/rpt.conf
#     mv -f $TMP/savenode.conf.tmp $CONFIGS/savenode.conf
#     mv -f $TMP/manager.conf.tmp $CONFIGS/manager.conf
#     mv -f $TMP/usbradio.conf.tmp $CONFIGS/usbradio.conf
#     mv -f $TMP/simpleusb.conf.tmp $CONFIGS/simpleusb.conf
#     mv -f $TMP/voter.conf.tmp $CONFIGS/voter.conf
#     touch $CONFIGS/usbradio_tune_usb_$NEWNODE.conf
#     touch $CONFIGS/simpleusb_tune_usb_$NEWNODE.conf
#     mv -f /var/www/html/allmon2/allmon.ini.php /var/www/html/allmon2/allmon.ini.php.$MONTHDAY 2>/dev/null
#     cp -f $TMP/allmon.ini.php.tmp $CONFIGS/allmon.ini.php 2>/dev/null
#     mv -f $TMP/allmon.ini.php.tmp /var/www/html/allmon2/allmon.ini.php 2>/dev/null
#     whiptail --msgbox "New configuration written to $CONFIGS/FILENAME.conf" 20 60 2
# }

do_save_newnode_newcall_newpswd() {
    echo "doing do_save_newnode_newcall_newpswd" >>$logfile
    # write node number, call sign, & registration info.
    do_rxchannel_set   #comments out all rxchannel statemnets and uncomments with selection from interface menu
    do_iax_node        #set node:password on register line of rpt.conf
    do_rpt_node        #set node number and call sign in rpt.conf
    do_extensions_node #set node variable in extensions.conf
    # do_rpt_statpost         #uncomment statpost lines in rpt.conf
    do_rpt_duplex    #sets duplex type in rpt.conf
    do_iface_nodenum #sets node number in usbradio.conf simpleusb.conf voter.conf
    whiptail --msgbox "Node Number, Call Sign and the node password have been \nsaved in $TMP/FILENAME.conf.tmp \n From the Main Menu Select (SAVE) \nto Save changes and backup originals" 20 60 2
}

do_iface_nodenum() {
    echo "doing do_iface_nodenum" >>$logfile
    sed -i "s/$CURRENT_NODE/$NEW_NODE/g" $TMP/usbradio.conf.tmp
    sed -i "s/$CURRENT_NODE/$NEW_NODE/g" $TMP/simpleusb.conf.tmp
    sed -i "s/$CURRENT_NODE/$NEW_NODE/g" $TMP/voter.conf.tmp
    sed -i "s/1998/$NEW_NODE/g" $TMP/voter.conf.tmp
}

do_rpt_statpost() {
    # uncomments the statpost command in rpt.conf
    echo "doing do_rpt_statpost" >>$logfile
    whiptail --msgbox "Enabling the Statpost program in rpt.conf" 20 60 2
    # Used the $ in place of the /
    sed -i 's$[ \t]*;[ \t]*statpost_program[ \t]*=[ \t]*/usr/bin/wget$statpost_program = /usr/bin/wget$g' $TMP/rpt.conf.tmp
    sed -i "0,/statpost_url/ s/^[ \t]*;[ \t]*statpost_url/statpost_url/" $TMP/rpt.conf.tmp
}

do_usbradio() {
    #sets usbradio to LOAD
    echo "doing do_usbradio" >>$logfile
    whiptail --msgbox "Enabling USBRadio channel drivers" 20 60 2
    AST_RESTART=1
    NEWIFACE="USBRadio"
    channelchoice="USBRadio"
    sed -i '/chan_usbradio/s/^noload/load/g' $TMP/modules.conf.tmp
}

do_voter() {
    #sets voter channel to LOAD
    echo "doing do_voter" >>$logfile
    whiptail --msgbox "Enabling Voter channel drivers" 20 60 2
    AST_RESTART=1
    NEWIFACE="Voter"
    channelchoice="voter"
    sed -i '/chan_voter/s/^noload/load/g' $TMP/modules.conf.tmp
}

do_dahdi() {
    #sets dahdi channel to LOAD
    echo "doing do_dahdi" >>$logfile
    whiptail --msgbox "Enabling Dahdi-Pseudo channel drivers" 20 60 2
    NEWIFACE="Dahdi-pseudo"
    AST_RESTART=1
    channelchoice="dahdi"
    sed -i '/chan_dahdi/s/^noload/load/g' $TMP/modules.conf.tmp
}

do_echolink_config() {
    # runs the 3 parts to enable and build an echolink.conf
    echo "doing do_echolink_config" >>$logfile
    AST_RESTART=1
    do_echolink_enable
    do_write_echo_config_conf
}

#echo "do_echolink_enable"
do_echolink_enable() {
    # sets chan_echolink.so to LOAD
    echo "doing do_echolink_enable" >>$logfile
    # whiptail --msgbox "Enabling Echolink channel drivers" 20 60 2
    sed -i '/chan_echolink/s/^noload/load/g' $TMP/modules.conf.tmp
}

do_write_echo_config_conf() {
    AST_RESTART=1
    # writes an echolink.conf file based on variables set by (do_echolink_setup) OR by (do_echolink_setup_menu) after (do_echolink_import)
    echo "doing do_write_echo_config_conf" >>$logfile
    whiptail --msgbox "Creating Temporary Echolink config file \n You must select SAVE Changes when exiting \n the MAIN menu or ALL changes will be lost" 20 60 4
    cat <<_EOF >$TMP/echolink.conf.tmp
[el0]
call = $ECHOCALLSIGN                          ; Change this!
pwd = $ECHOPASSWD                           ; Change this!
name = $ECHOOWNERNAME                        ; Change this!
qth = $ECHOQTH                           ; Change this!
email = $ECHOEMAIL                         ; Change this!
node = $ECHONODE                           ; Change this!
; Data for EchoLink Status Page
lat = $ECHONODELAT                               ; Latitude in decimal degrees
lon = -$ECHONODELON                               ; Longitude in decimal degrees
freq = $ECHONODEFREQ                              ; not mandatory Frequency in MHz
tone = $ECHONODETONE                              ; not mandatory CTCSS Tone (0 for none)
power = $ECHOTXPWR                               ; 0=0W, 1=1W, 2=4W, 3=9W, 4=16W, 5=25W, 6=36W, 7=49W, 8=64W, 9=81W (Power in Watts)
height = $ECHOANTHEIGHT                              ; 0=10 1=20 2=40 3=80 4=160 5=320 6=640 7=1280 8=2560 9=5120 (AMSL in Feet)
gain = $ECHOGAIN                                ; Gain in db (0-9)
dir = 0                                 ; 0=omni 1=45deg 2=90deg 3=135deg 4=180deg 5=225deg 6=270deg 7=315deg 8=360deg (Direction)
maxstns = 20                            ; Max Stations

rtcptimeout = 10
recfile = /tmp/echolink_recorded.gsm    ;
astnode = $ECHOASTNODE                          ; Change this!
context = radio-secure                  ; Default in code is echolink-in

; Max 3 servers
server1 = nasouth.echolink.org
server2 = naeast.echolink.org
server3 = server3.echolink.org

; To deny w6xxx you would add the statement: deny = w6xxx
; To prohibit computer-based connections you would write: permit = *-*
; To allow access to only a select group of callsigns: permit = w6abc,w6def,...
; permit                                ; comma delimited list of callsign, type (-r)
; deny


; Remote text commands thru netcat:
; o.conip <IPaddress>    (request a connect)
; o.dconip <IPaddress>   (request a disconnect)
; o.rec                  (turn on/off recording)

; ipaddr
; port

_EOF

}

do_echolink_import() {
    # imports variables from echolink.conf
    echo "doing do_echolink_import" >>$logfile
    # import existing echolink.conf values as varibles
    #whiptail --msgbox "Importing existing echolink configuration" 20 60 2
    ECHOCALLSIGN=$(awk '/call =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHOASTNODE=$(awk '/astnode =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHONODE=$(awk '/^node =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHOPASSWD=$(awk '/pwd =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHOOWNER_F_NAME=$(awk '/name =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHOOWNER_L_NAME=$(awk '/name =/' $TMP/echolink.conf.tmp | awk '{print $4}' | sed 's/^;\(.*\)/\1/')
    ECHOOWNERNAME=$(echo $ECHOOWNER_F_NAME $ECHOOWNER_L_NAME)
    ECHOQTH=$(awk '/qth =/' $TMP/echolink.conf.tmp | awk '{print $3,$4}' | sed 's/^;\(.*\)/\1/')
    ECHOEMAIL=$(awk '/email =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHONODELAT=$(awk '/lat =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHONODELON=$(awk '/lon =/' $TMP/echolink.conf.tmp | awk '{print $3}' | sed 's/^-\(.*\)/\1/')
    ECHOTXPWR=$(awk '/power =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHOANTHEIGHT=$(awk '/height =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHOGAIN=$(awk '/gain =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHONODEFREQ=$(awk '/freq =/' $TMP/echolink.conf.tmp | awk '{print $3}')
    ECHONODETONE=$(awk '/tone =/' $TMP/echolink.conf.tmp | awk '{print $3}')

}

do_rxchannel_set() {
    # sets rxchannel in rpt.conf from variable set by (do_interface_type) menu option
    echo "doing do_rxchannel_set" >>$logfile
    AST_RESTART=1
    whiptail --msgbox "Setting repeaters rxchannel to $channelchoice in rpt.conf" 20 60 4
    # comment out ALL
    sed -i '/dahdi\/pseudo/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/SimpleUSB\/usb/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/Pi\/1/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/Radio\/usb/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/Dahdi\/1/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/Beagle\/1/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/USRP\/127/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    sed -i '/Voter/s/^rxchannel/; rxchannel/g' $TMP/rpt.conf.tmp
    #uncomment what they choose
    #uses channelchoice varible from do_interface_type
    #if channelchoice variable does not match then default as HUB
    case "$channelchoice" in
    SimpleUSB)
        sed -i '/SimpleUSB\/usb/s/^[ \t]*;[ \t]*rxchannel/rxchannel/g' $TMP/rpt.conf.tmp
        ;;
    USBRadio)
        sed -i '/Radio\/usb/s/^[ \t]*;[ \t]*rxchannel/rxchannel/g' $TMP/rpt.conf.tmp
        ;;
    voter)
        sed -i "/rxchannel[ \t]*=[ \t]*USRP/a rxchannel = Voter\/$NEW_NODE \t\t;For voting systems using RTCM" $TMP/rpt.conf.tmp
        ;;
    dahdi)
        sed -i '/dahdi\/pseudo/s/^[ \t]*;[ \t]*rxchannel/rxchannel/g' $TMP/rpt.conf.tmp
        ;;
    *)
        sed -i '/dahdi\/pseudo/s/^[ \t]*;[ \t]*rxchannel/rxchannel/g' $TMP/rpt.conf.tmp
        ;;
    esac
}

do_about() {
    # what every about section is for
    echo "doing do_about" >>$logfile
    whiptail --msgbox "\
This script will help guide you
through the initial Node configuration.
Please visit http://allstarlink.org
for more information \
" 20 60 2
}

do_select_duplex() {
    echo "doing do_new_duplex" >>$logfile
    test=$(whiptail --title "$title" --inputbox "\
Select Duplex type:

 0 = Half duplex with no telemetry tones
 1 = Half duplex with telemetry tones (simplex node)
 2 = Full Duplex with telemetry tones (repeater)
 3 = Full Duplex with telemetry, but no repeated audio.
 4 = Full Duplex with telemetry (Special use)

The most common types are (1) or (2)

See wiki.allstarlink.org for full documentation.\
" 20 60 "$CURRENT_DUPLEX" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        if [ $test != $CURRENT_DUPLEX ]; then
            NEW_DUPLEX=$test
            do_set_duplex
        fi
    fi
}

do_set_duplex() {
    echo "doing do_rpt_duplex" >>$logfile
    re=^[0-4]$
    if ! [[ $NEW_DUPLEX =~ $re ]]; then
        whiptail --msgbox "Duplex type must be a number between 0 and 4." 20 60
    else
        #whiptail --msgbox "Changing duplex $CURRENT_DUPLEX to $NEW_DUPLEX in rpt.conf" 20 60
        sed -i "/^duplex\s*=\s*/s/$CURRENT_DUPLEX/$NEW_DUPLEX/" $CONFIGS/rpt.conf
        AST_RESTART=1
    fi
}

do_select_node_number() {
    test=$(whiptail --inputbox "Current Node Number is $CURRENT_NODE Enter New Node Number" 8 78 "$CURRENT_NODE" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        if [ $test != $CURRENT_NODE ]; then
            NEW_NODE=$test
            do_set_node_number
        fi
    fi
}

do_set_node_number() {
    echo "doing do_set_node_number" >>$logfile
    re=^[0-9]\+$
    if ! [[ $NEW_NODE =~ $re ]]; then
        whiptail --msgbox "Node number must be a number, usually 3 or more digits." 20 60
    else
        sed -i "s/$CURRENT_NODE/$NEW_NODE/g" $CONFIGS/rpt.conf
        sed -i "/^NODE\s*=\s*[0-9]\+/ s/$CURRENT_NODE/$NEW_NODE/" $CONFIGS/extensions.conf
        sed -i "/^register.*=\s*$CURRENT_NODE/ s/$CURRENT_NODE/$NEW_NODE/" $CONFIGS/iax.conf
        sed -i "/^NODE\s*=\s*$CURRENT_NODE/ s/$CURRENT_NODE/$NEW_NODE/" $CONFIGS/savenode.conf
        #sed -i "s/ENABLE\s*=\s*[01]/ENABLE=1/" $CONFIGS/savenode.conf
        AST_RESTART=1;
    fi
}

do_select_node_password() {
    test=$(whiptail --inputbox "Enter password for Node $NEW_NODE" 8 78 "$CURRENT_PASSWD" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        if [ $test != $CURRENT_PASSWD ]; then
            NEW_PASSWD=$test
            do_set_node_password
        fi
    fi
}

do_set_node_password() {
    re=^[0-9a-zA-Z_-]{6,}$
    if ! [[ $NEW_PASSWD =~ $re ]]; then
        whiptail --msgbox "Node password may only contain letters, numbers, underscore and dash. It must be 6 or more characters in length." 20 60
    else
        sed -i "/^register.*=\s*$CURRENT_NODE:$CURRENT_PASSWD@/ s/$CURRENT_PASSWD/$NEW_PASSWD/" $CONFIGS/iax.conf
        #this sed is for http registration with an alternate port. ie register=<node>#<port>:<passwd>@register.allstarlink.org
        sed -i "/^register\s*=\s*$CURRENT_NODE#.\+:$CURRENT_PASSWD@/ s/$CURRENT_PASSWD/$NEW_PASSWD/" $CONFIGS/iax.conf
        sed -i "/^PASSWORD\s*=\s*$CURRENT_PASSWD/ s/$CURRENT_PASSWD/$NEW_PASSWD/" $CONFIGS/savenode.conf
        AST_RESTART=1;
    fi
}

do_select_node_callsign() {
    test=$(whiptail --inputbox "Enter Call Sign for Node $NEW_NODE" 8 78 "$CURRENT_CALLSIGN" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        if [ $test != $CURRENT_CALLSIGN ]; then
            NEW_CALLSIGN=$test
            do_set_node_callsign
        fi
    fi
}

do_set_node_callsign() {
    re=^[0-9A-Z]{3,}$
    if ! [[ $NEW_CALLSIGN =~ $re ]]; then
        whiptail --msgbox "Call sign may only uppercase letters and numbers. It must be 3 or more characters in length." 20 60
    else
        sed -i "/^idrecording\s*=\s*|i$CURRENT_CALLSIGN/ s/$CURRENT_CALLSIGN/$NEW_CALLSIGN/" $CONFIGS/rpt.conf
        sed -i "/^idtalkover\s*=\s*|i$CURRENT_CALLSIGN/ s/$CURRENT_CALLSIGN/$NEW_CALLSIGN/" $CONFIGS/rpt.conf
        AST_RESTART=1;
    fi
}

do_select_ami_secret() {
    echo "doing do_mngr_secret" >>$logfile
    test=$(whiptail --inputbox "Enter AMI secret for Allmon and Supermon" 8 78 "$CURRENT_AMI_SECRET" --title "$title" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        if [ $test != $CURRENT_AMI_SECRET ]; then
            NEW_AMI_SECRET=$test
            do_set_ami_secret
        fi
    fi
}

do_set_ami_secret() {
    re=^[0-9a-zA-Z_-]{12,}$
    if ! [[ $NEW_AMI_SECRET =~ $re ]]; then
        whiptail --msgbox "AMI secret may only contain letters, numbers, underscore and dash. It must be 12 or more characters in length." 20 60
    else
        sed -i "/^secret\s*=\s*$CURRENT_AMI_SECRET/ s/$CURRENT_AMI_SECRET/$NEW_AMI_SECRET/" $CONFIGS/manager.conf
        AST_RESTART=1;
    fi
    #do_write_mngr_secret
    #do_build_allmon
}

do_select_interface() {
    ## interface MENU
    echo "doing do_interface_type" >>$logfile
    FUN=$(whiptail --title "$title" --menu "Select Radio Interface" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "1" "SimpleUSB: CM1xx USB Cards no/DSP (URIx or RA-40)" \
        "2" "USBRadio: CM1xx USB Cards with DSP (URIx or RA-40)" \
        "3" "RTCM: Radio Thin Client or Voter Boards" \
        "4" "Dahdi/pseudo: No radio interface or HUB node" \
        "5" "PCI Quad Radio Card" \
        "6" "Rpi Beagle Board" \
        "7" "USRP" \
        3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return
    else
        case "$FUN" in
        1) do_set_simpleusb ;;
        2) do_set_usbradio ;;
        3) do_set_voter ;;
        4) do_set_pseudo ;;
        5) do_set_quadradio ;;
        6) do_set_beagle ;;
        7) do_set_usrp ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac
    fi
}

do_noload_chan_modules() {
    # Set common app_rpt channel modules to noload
    sed -i "/^load\s*=>\s*chan_simpleusb/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_usbradio/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_usrp/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_voter/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_pi/ s/load/noload/" $CONFIGS/modules.conf
    sed -i "/^load\s*=>\s*chan_beagle/ s/load/noload/" $CONFIGS/modules.conf

    # Comment all rxchannels.
    sed -i "s/^rxchannel/; rxchannel/g" $CONFIGS/rpt.conf
}

do_set_simpleusb() {
    do_noload_chan_modules
    echo "doing do_set_simpleusb" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_simpleusb/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*SimpleUSB/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_usbradio() {
    do_noload_chan_modules
    echo "doing do_set_usbradio" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_usbradio/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Radio/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_voter() {
    do_noload_chan_modules
    echo "doing do_set_voter" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_voter/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Voter/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_pseudo() {
    do_noload_chan_modules
    echo "doing do_set_pesudo" >>$logfile

    # Load module (is chan_dahdi always loaded?) and set rxchannel
    sed -i "/^noload.\+chan_dahdi/ s/noload/load/" $CONFIGS/modules.conf
    sed -i '/^;\s*rxchannel\s*=\s*dahdi\/pseudo/ s/;\s*rxchannel/rxchannel/' $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_quadradio() {
    do_noload_chan_modules
    echo "doing do_set_quad" >>$logfile

    # Set rxchannel (No dahdi/pesudo module?)
    sed -i "/^;\s*rxchannel\s*=\s*Dahdi/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_beagle() {
    do_noload_chan_modules
    echo "doing do_set_beagle" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_beagle/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Beagle/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_set_usrp() {
    do_noload_chan_modules
    echo "doing do_set_usrp" >>$logfile

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_usrp/ s/noload/load/" $CONFIGS/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*USRP/ s/^;\s*rxchannel/rxchannel/" $CONFIGS/rpt.conf
    AST_RESTART=1
}

do_echolink_setup_menu() {
    RETE=0
    while true; do
        FUNE=$(whiptail --title "$title" \
            --menu "Echolink Settings Menu" \
            $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
            "EA ASL node" "AST NODE is $ECHOASTNODE" \
            "EB EL Callsign" "EL Call sign is $ECHOCALLSIGN" \
            "EC EL node" "EL NODE is $ECHONODE" \
            "ED EL Password" "EL password is $ECHOPASSWD" \
            "EF Owners Name" "EL Owners name is $ECHOOWNERNAME" \
            "EG QTH" "EL QTH is $ECHOQTH" \
            "EH Email addr" "EL Email addr. is $ECHOEMAIL" \
            "EI Latitude" "GPS LAT is $ECHONODELAT" \
            "EJ Longitude" "GPS LON is - $ECHONODELON" \
            "EK TX PWR" "Transmitter power is $ECHOTXPWR" \
            "EL Antenna Height" "Antenna Height is $ECHOANTHEIGHT" \
            "EM Ant. Gain" "Ant gain is $ECHOGAIN" \
            "EN Freq." "Transmitter Frequency is $ECHONODEFREQ" \
            "EO PL tone" "PL tone used is $ECHONODETONE" \
            "EZ Save" "Enable Echolink and save settings to temp file" \
            3>&1 1>&2 2>&3)
        RETE=$?
        echo "RETE is $RETE" >>$logfile
        if [ $RETE -eq 1 ]; then
            return
        elif [ $RETE -eq 0 ]; then
            case $FUNE in
            EA\ *) ECHOASTNODE=$(whiptail --inputbox "Enter AllStar NODE Number.( NOT ) Echolink node number" 8 78 --title "Asterisk Node Number" 3>&1 1>&2 2>&3) ;;
            EB\ *) ECHOCALLSIGN=$(whiptail --inputbox "Enter Echolink Node Call Sign (W1AW-R)" 8 78 --title "Echolink Node Call Sign" 3>&1 1>&2 2>&3) ;;
            EC\ *) ECHONODE=$(whiptail --inputbox "Enter Echolink Node Number" 8 78 --title "Echolink Node Number" 3>&1 1>&2 2>&3) ;;
            ED\ *) ECHOPASSWD=$(whiptail --inputbox "Enter Echolink Password" 8 78 --title "Echolink Node Password" 3>&1 1>&2 2>&3) ;;
            EF\ *) ECHOOWNERNAME=$(whiptail --inputbox "Enter Echolink User Name" 8 78 --title "Echolink User Name" 3>&1 1>&2 2>&3) ;;
            EG\ *) ECHOQTH=$(whiptail --inputbox "Enter Echolink QTH" 8 78 --title "Echolink QTH" 3>&1 1>&2 2>&3) ;;
            EH\ *) ECHOEMAIL=$(whiptail --inputbox "Enter Echolink Node Owners Email" 8 78 --title "Echolink Node Owners Email" 3>&1 1>&2 2>&3) ;;
            EI\ *) ECHONODELAT=$(whiptail --inputbox "Enter Echolink GPS (LAT)" 8 78 --title "Echolink NODE GPS" 3>&1 1>&2 2>&3) ;;
            EJ\ *) ECHONODELON=$(whiptail --inputbox "Enter Echolink GPS (LON) without the (-)" 8 78 --title "Echolink NODE GPS" 3>&1 1>&2 2>&3) ;;
            EK\ *) ECHOTXPWR=$(whiptail --inputbox "0=0W, 1=1W, 2=4W, 3=9W, 4=16W, 5=25W, 6=36W, 7=49W, 8=64W, 9=81W (Power in Watts)" 8 78 --title "Echolink NODE TX PWR" 3>&1 1>&2 2>&3) ;;
            EL\ *) ECHOANTHEIGHT=$(whiptail --inputbox "0=10 1=20 2=40 3=80 4=160 5=320 6=640 7=1280 8=2560 9=5120 (AMSL in Feet)" 8 78 --title "Echolink HAT" 3>&1 1>&2 2>&3) ;;
            EM\ *) ECHOGAIN=$(whiptail --inputbox "Enter Echolink Antenna Gain in db (0-9)" 8 78 --title "Echolink Antenna Gain" 3>&1 1>&2 2>&3) ;;
            EN\ *) ECHONODEFREQ=$(whiptail --inputbox "Enter Repeater Frequency, not mandatory" 8 78 --title "Echolink Repeater Freq" 3>&1 1>&2 2>&3) ;;
            EO\ *) ECHONODETONE=$(whiptail --inputbox "Enter Repeater PL Tone, not mandatory" 8 78 --title "Echolink Repeater PL-Tone" 3>&1 1>&2 2>&3) ;;
            EZ\ *) do_echolink_config ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
            esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
        fi
    done
}

get_node_settings () {
    #CURRENT_NODE=$(grep -o '^\[[0-9]*\]' $TMP/rpt.conf.tmp | sed 's/.*\[\([^]]*\)\].*/\1/g')
    #CURRENT_REG_PSWD=$(echo "$CURRENT_REG" | awk -F':' '{print $2}')
    #CURRENT_CALLSIGN=$(grep '^idrecording =' /$TMP/rpt.conf.tmp | awk -F'=' '{print $2}' | sed 's/|\i//' | sed -e 's/^\(.\{9\}\).*/\1/')
    #CURRENT_DUPLEX=$(grep '^duplex =' $TMP/rpt.conf.tmp | awk -F " " '{print $3}')
    #CURRENT_INTERFACE=$(grep '^rxchannel' $TMP/rpt.conf.tmp | awk -F'=' '{print $2}' | awk -F'  ;' '{print$1}')

    #sed remove first and last character
    CURRENT_NODE=$(grep -o '^\[[0-9]*\]' $CONFIGS/rpt.conf | sed 's/^.//;s/.$//')

    #sed captures everything between : and @
    CURRENT_PASSWD=$(grep '^register.*=\s*' $CONFIGS/iax.conf | sed 's/.*:\(.*\)@.*/\1/')

    #sed captures alphanumeric between |i and the rest of line
    #CURRENT_CALLSIGN=$(grep '^idrecording\s*=\s*' $CONFIGS/rpt.conf | sed 's/.*|i\([0-9a-zA-Z]*\).*/\1/')
    CURRENT_CALLSIGN=$(grep '^idrecording\s*=\s*' $CONFIGS/rpt.conf | sed 's/.*|i\([0-9a-zA-Z/-]*\).*/\1/')

    #sed captures digits after =
    CURRENT_DUPLEX=$(grep '^duplex\s*=\s*' $CONFIGS/rpt.conf | sed 's/^duplex\s*=\s*\([0-9]*\).*/\1/')

    #sed removes all before = and any after ;
    CURRENT_INTERFACE=$(grep '^rxchannel\s*=\s*' $CONFIGS/rpt.conf | sed 's/^rxchannel\s*=\s*//;s/\s*;.*$//')

    #sed removes all before = and any after ;
    CURRENT_AMI_SECRET=$(grep '^secret\s*=\s*' $CONFIGS/manager.conf | sed 's/^secret\s*=\s*//;s/\s*;.*$//')
}

do_asterisk_setup_menu() {
    echo "Node Settings Menu" >>$logfile
    while true; do
        calc_wt_size
        get_node_settings

        FUN=$(whiptail --title "$title" --menu "AllStar Node Settings Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
            "1" "Duplex type: $CURRENT_DUPLEX" \
            "2" "Node Number: $CURRENT_NODE" \
            "3" "Node Password: $CURRENT_PASSWD" \
            "4" "Node Callsign: $CURRENT_CALLSIGN" \
            "5" "AMI Password: $CURRENT_AMI_SECRET" \
            "6" "Radio Interface: $CURRENT_INTERFACE" \
            "I" "Information for these values" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            return
        else
            case "$FUN" in
            1) do_select_duplex ;;
            2) do_select_node_number ;;
            3) do_select_node_password ;;
            4) do_select_node_callsign ;;
            5) do_select_ami_secret ;;
            6) do_select_interface ;;
            *) whiptail --msgbox "Sorry! $test is an unrecognized selection at this time." 20 60 ;;
            esac
        fi
    done
}

do_main_menu() {
    echo "Node Setup Main Menu" >>$logfile
    while true; do
        calc_wt_size
        FUN=$(whiptail --title "$title" --menu "Node Setup Main Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Select --cancel-button "Exit Node Setup" \
            "C" "Create a local backup" \
            "R" "Restore a local backup" \
            "1" "AllStar Node Settings Menu" \
            "2" "Echolink Settings Menu" \
            "3" "Restart Asterisk" \
            "4" "Show AllStar & Echolink Settings" \
            "5" "Load Initial AllStar & Echolink Settings" \
            "I" "Information About this menu" \
            3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            do_exit
        else
            case "$FUN" in
            C) do_local_conf_backup ;;
            1) do_asterisk_setup_menu ;;
            2) do_echolink_setup_menu ;;
            3) AST_RESTART=0; astres.sh ;;
            4) do_config_list ;;
            5) do_load_initial_settings ;;
            R) do_local_conf_restore ;;
            I) do_about ;;
            *) whiptail --msgbox "$FUN is unrecognized option." 20 60 ;;
            esac
        fi
    done
}

do_exit() {
    echo "doing do_exit" >>$logfile
    if [ $AST_RESTART -eq 1 ]; then
        if (whiptail --title "$title" --yesno "Asterisk must be restarted to make changes.\n\nAre you sure you want to exit?" 12 78); then
            exit 0
        else
            do_main_menu
        fi
    else
        exit 0
    fi
}

do_set_env
#do_echolink_import
do_main_menu
